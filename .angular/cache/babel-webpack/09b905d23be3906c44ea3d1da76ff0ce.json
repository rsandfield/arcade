{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/rober/Documents/Computer Science/Side Projects/arcade/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { EngineService } from 'src/app/utility/engine.service';\nimport { addTimeToDate } from 'src/app/utility/utilities';\nimport { SystemLoader } from './system-loader';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/utility/engine.service\";\nconst _c0 = [\"canvas\"];\nexport class OrreryComponent {\n  constructor(engineService) {\n    this.engineService = engineService;\n    this.epochStart = new Date();\n    this.epochCurrent = new Date();\n    this.speed = 10000;\n    this.scale = 10 ** -9;\n  }\n\n  ngOnInit() {\n    if (!this.canvas) throw new Error(\"No canvas\");\n    this.engineService.createScene(this.canvas);\n    this.engineService.animate();\n    this.loadCamera();\n    this.loadSystem().then(_ => {\n      if (!this.root) throw new Error(\"System failed to load!\");\n      this.setCameraTarget(this.root.satellites[2]);\n    });\n    setInterval(this.update.bind(this), 1000.0 / 60.0);\n  }\n\n  loadSystem() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let loader = new SystemLoader(\"assets/orrery/solarsystem.txt\", _this, _this.engineService);\n      yield loader.loadSystem().then(_ => {\n        _this.epochStart = loader.epochStart;\n        _this.epochCurrent = _this.epochStart;\n        _this.root = loader.root;\n      });\n    })();\n  }\n\n  loadCamera() {\n    let camera = this.engineService.getCamera();\n    camera.maxZ = 30000;\n    camera.upperRadiusLimit = 25000;\n    camera.wheelDeltaPercentage = 0.01;\n    camera.minZ = 0.0001;\n  }\n\n  update() {\n    this.epochCurrent = addTimeToDate(this.epochCurrent, this.speed);\n\n    if (this.root) {\n      this.root.update(this.epochCurrent.getTime(), this.engineService.getCamera());\n    }\n  }\n\n  setCameraTarget(target) {\n    let camera = this.engineService.getCamera();\n    camera.lockedTarget = target.mesh;\n    camera.lowerRadiusLimit = target.getCameraLowerLimit();\n    camera.speed = 1;\n  }\n\n}\n\nOrreryComponent.ɵfac = function OrreryComponent_Factory(t) {\n  return new (t || OrreryComponent)(i0.ɵɵdirectiveInject(i1.EngineService));\n};\n\nOrreryComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: OrreryComponent,\n  selectors: [[\"app-orrery\"]],\n  viewQuery: function OrreryComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvas = _t.first);\n    }\n  },\n  features: [i0.ɵɵProvidersFeature([EngineService])],\n  decls: 11,\n  vars: 1,\n  consts: [[1, \"grid\"], [\"tabindex\", \"0\", \"height\", \"500\", \"width\", \"500\", 1, \"canvas\"], [\"canvas\", \"\"], [1, \"column\"], [1, \"description\"]],\n  template: function OrreryComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"canvas\", 1, 2);\n      i0.ɵɵelementStart(3, \"div\", 3);\n      i0.ɵɵelementStart(4, \"div\");\n      i0.ɵɵelementStart(5, \"h1\");\n      i0.ɵɵtext(6, \"Orrery\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"p\");\n      i0.ɵɵtext(8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"p\", 4);\n      i0.ɵɵtext(10, \" An orrery is a tool which can show the positions of planets relative to each other on a given date. This digital orrery uses the recorded orbital parameters circa December 31st, 2000 and projects those paramters forward and backward assuming basic Keplerian motion. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(8);\n      i0.ɵɵtextInterpolate1(\"Date: \", ctx.epochCurrent, \"\");\n    }\n  },\n  styles: [\"canvas[_ngcontent-%COMP%] {\\n  background-color: black;\\n}\\n\\n.grid[_ngcontent-%COMP%] {\\n  display: grid;\\n  grid-template-columns: 530px 200px;\\n}\\n\\n.column[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: space-between;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9ycmVyeS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLHVCQUFBO0FBQ0o7O0FBRUE7RUFDSSxhQUFBO0VBQ0Esa0NBQUE7QUFDSjs7QUFFQTtFQUNJLGFBQUE7RUFDQSxzQkFBQTtFQUNBLDhCQUFBO0FBQ0oiLCJmaWxlIjoib3JyZXJ5LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiY2FudmFzIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xyXG59XHJcblxyXG4uZ3JpZCB7XHJcbiAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiA1MzBweCAyMDBweDtcclxufVxyXG5cclxuLmNvbHVtbiB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxufSJdfQ== */\"]\n});","map":{"version":3,"sources":["C:/Users/rober/Documents/Computer Science/Side Projects/arcade/src/app/tools/orrery/orrery.component.ts"],"names":["EngineService","addTimeToDate","SystemLoader","i0","i1","_c0","OrreryComponent","constructor","engineService","epochStart","Date","epochCurrent","speed","scale","ngOnInit","canvas","Error","createScene","animate","loadCamera","loadSystem","then","_","root","setCameraTarget","satellites","setInterval","update","bind","loader","camera","getCamera","maxZ","upperRadiusLimit","wheelDeltaPercentage","minZ","getTime","target","lockedTarget","mesh","lowerRadiusLimit","getCameraLowerLimit","ɵfac","OrreryComponent_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","OrreryComponent_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","features","ɵɵProvidersFeature","decls","vars","consts","template","OrreryComponent_Template","ɵɵelementStart","ɵɵelement","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","styles"],"mappings":"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","sourcesContent":["import { EngineService } from 'src/app/utility/engine.service';\r\nimport { addTimeToDate } from 'src/app/utility/utilities';\r\nimport { SystemLoader } from './system-loader';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"src/app/utility/engine.service\";\r\nconst _c0 = [\"canvas\"];\r\nexport class OrreryComponent {\r\n    constructor(engineService) {\r\n        this.engineService = engineService;\r\n        this.epochStart = new Date();\r\n        this.epochCurrent = new Date();\r\n        this.speed = 10000;\r\n        this.scale = 10 ** -9;\r\n    }\r\n    ngOnInit() {\r\n        if (!this.canvas)\r\n            throw new Error(\"No canvas\");\r\n        this.engineService.createScene(this.canvas);\r\n        this.engineService.animate();\r\n        this.loadCamera();\r\n        this.loadSystem()\r\n            .then(_ => {\r\n            if (!this.root)\r\n                throw new Error(\"System failed to load!\");\r\n            this.setCameraTarget(this.root.satellites[2]);\r\n        });\r\n        setInterval(this.update.bind(this), 1000.0 / 60.0);\r\n    }\r\n    async loadSystem() {\r\n        let loader = new SystemLoader(\"assets/orrery/solarsystem.txt\", this, this.engineService);\r\n        await loader.loadSystem()\r\n            .then(_ => {\r\n            this.epochStart = loader.epochStart;\r\n            this.epochCurrent = this.epochStart;\r\n            this.root = loader.root;\r\n        });\r\n    }\r\n    loadCamera() {\r\n        let camera = this.engineService.getCamera();\r\n        camera.maxZ = 30000;\r\n        camera.upperRadiusLimit = 25000;\r\n        camera.wheelDeltaPercentage = 0.01;\r\n        camera.minZ = 0.0001;\r\n    }\r\n    update() {\r\n        this.epochCurrent = addTimeToDate(this.epochCurrent, this.speed);\r\n        if (this.root) {\r\n            this.root.update(this.epochCurrent.getTime(), this.engineService.getCamera());\r\n        }\r\n    }\r\n    setCameraTarget(target) {\r\n        let camera = this.engineService.getCamera();\r\n        camera.lockedTarget = (target.mesh);\r\n        camera.lowerRadiusLimit = target.getCameraLowerLimit();\r\n        camera.speed = 1;\r\n    }\r\n}\r\nOrreryComponent.ɵfac = function OrreryComponent_Factory(t) { return new (t || OrreryComponent)(i0.ɵɵdirectiveInject(i1.EngineService)); };\r\nOrreryComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: OrreryComponent, selectors: [[\"app-orrery\"]], viewQuery: function OrreryComponent_Query(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵviewQuery(_c0, 7);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvas = _t.first);\r\n    } }, features: [i0.ɵɵProvidersFeature([EngineService])], decls: 11, vars: 1, consts: [[1, \"grid\"], [\"tabindex\", \"0\", \"height\", \"500\", \"width\", \"500\", 1, \"canvas\"], [\"canvas\", \"\"], [1, \"column\"], [1, \"description\"]], template: function OrreryComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵelementStart(0, \"div\", 0);\r\n        i0.ɵɵelement(1, \"canvas\", 1, 2);\r\n        i0.ɵɵelementStart(3, \"div\", 3);\r\n        i0.ɵɵelementStart(4, \"div\");\r\n        i0.ɵɵelementStart(5, \"h1\");\r\n        i0.ɵɵtext(6, \"Orrery\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(7, \"p\");\r\n        i0.ɵɵtext(8);\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(9, \"p\", 4);\r\n        i0.ɵɵtext(10, \" An orrery is a tool which can show the positions of planets relative to each other on a given date. This digital orrery uses the recorded orbital parameters circa December 31st, 2000 and projects those paramters forward and backward assuming basic Keplerian motion. \");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n    } if (rf & 2) {\r\n        i0.ɵɵadvance(8);\r\n        i0.ɵɵtextInterpolate1(\"Date: \", ctx.epochCurrent, \"\");\r\n    } }, styles: [\"canvas[_ngcontent-%COMP%] {\\n  background-color: black;\\n}\\n\\n.grid[_ngcontent-%COMP%] {\\n  display: grid;\\n  grid-template-columns: 530px 200px;\\n}\\n\\n.column[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: space-between;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9ycmVyeS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLHVCQUFBO0FBQ0o7O0FBRUE7RUFDSSxhQUFBO0VBQ0Esa0NBQUE7QUFDSjs7QUFFQTtFQUNJLGFBQUE7RUFDQSxzQkFBQTtFQUNBLDhCQUFBO0FBQ0oiLCJmaWxlIjoib3JyZXJ5LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiY2FudmFzIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xyXG59XHJcblxyXG4uZ3JpZCB7XHJcbiAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiA1MzBweCAyMDBweDtcclxufVxyXG5cclxuLmNvbHVtbiB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxufSJdfQ== */\"] });\r\n"]},"metadata":{},"sourceType":"module"}