{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/rober/Documents/Computer Science/Side Projects/arcade/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { textToDate } from \"src/app/utility/utilities\";\nimport { Body, Planet, Star } from \"./body\";\nimport { Orbit } from \"./orbit\";\nvar FILECOLUMNS;\n\n(function (FILECOLUMNS) {\n  FILECOLUMNS[FILECOLUMNS[\"TYPE\"] = 0] = \"TYPE\";\n  FILECOLUMNS[FILECOLUMNS[\"NAME\"] = 1] = \"NAME\";\n  FILECOLUMNS[FILECOLUMNS[\"SATELLITES\"] = 2] = \"SATELLITES\";\n  FILECOLUMNS[FILECOLUMNS[\"ASCENDING_NODE\"] = 3] = \"ASCENDING_NODE\";\n  FILECOLUMNS[FILECOLUMNS[\"INCLINATION\"] = 4] = \"INCLINATION\";\n  FILECOLUMNS[FILECOLUMNS[\"PERIAPSIS_ARGUMENT\"] = 5] = \"PERIAPSIS_ARGUMENT\";\n  FILECOLUMNS[FILECOLUMNS[\"SEMIMAJOR_SIG\"] = 6] = \"SEMIMAJOR_SIG\";\n  FILECOLUMNS[FILECOLUMNS[\"SEMIMAJOR_EXP\"] = 7] = \"SEMIMAJOR_EXP\";\n  FILECOLUMNS[FILECOLUMNS[\"ECCENTRICITY\"] = 8] = \"ECCENTRICITY\";\n  FILECOLUMNS[FILECOLUMNS[\"MEAN_ANOMALY\"] = 9] = \"MEAN_ANOMALY\";\n  FILECOLUMNS[FILECOLUMNS[\"MASS_SIG\"] = 10] = \"MASS_SIG\";\n  FILECOLUMNS[FILECOLUMNS[\"MASS_EXP\"] = 11] = \"MASS_EXP\";\n})(FILECOLUMNS || (FILECOLUMNS = {}));\n\nexport class SystemLoader {\n  constructor(filename, orrery, engineService) {\n    this.filename = filename;\n    this.orrery = orrery;\n    this.engineService = engineService;\n    this.epochStart = new Date();\n    this.ready = false;\n    this.scene = engineService.getScene();\n  }\n\n  loadSystem() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.ready = false;\n      yield fetch(_this.filename).then(response => response.text()).then(data => {\n        let lines = data.split('\\n');\n        let lineNumber = Number.parseInt(lines[1]);\n        _this.epochStart = textToDate(lines[lineNumber]);\n        _this.root = _this.parseSubsystem(lines.slice(lineNumber + 2), null);\n\n        _this.root.changeScale(_this.orrery.scale);\n\n        _this.ready = true;\n      });\n    })();\n  }\n\n  parseSubsystem(data, primary) {\n    let line = data[0].split(\" \").filter(i => i);\n    let type = line[FILECOLUMNS.TYPE];\n    let name = line[FILECOLUMNS.NAME];\n    let mass = Number.parseFloat(line[FILECOLUMNS.MASS_SIG]) * 10 ** Number.parseInt(line[FILECOLUMNS.MASS_EXP]);\n    let orbitalParameters = {\n      ascendingNode: Number.parseFloat(line[FILECOLUMNS.ASCENDING_NODE]),\n      inclination: Number.parseFloat(line[FILECOLUMNS.INCLINATION]),\n      periapsis: Number.parseFloat(line[FILECOLUMNS.PERIAPSIS_ARGUMENT]),\n      semimajor: Number.parseFloat(line[FILECOLUMNS.SEMIMAJOR_SIG]) * 10 ** Number.parseInt(line[FILECOLUMNS.SEMIMAJOR_EXP]),\n      eccentricity: Number.parseFloat(line[FILECOLUMNS.ECCENTRICITY]),\n      meanAnomaly: Number.parseFloat(line[FILECOLUMNS.MEAN_ANOMALY])\n    };\n    let body;\n\n    switch (type) {\n      case \"Star\":\n        body = new Star(name, this.engineService, {\n          mass\n        });\n        if (primary) body.orbit = new Orbit(name, primary, this.scene, orbitalParameters);\n        break;\n\n      case \"Planet\":\n        if (!primary) throw new Error(\"Planets must have a primary body to orbit!\");\n        body = new Planet(name, this.engineService, {\n          mass\n        }, new Orbit(name, primary, this.scene, orbitalParameters));\n        break;\n\n      default:\n        body = new Body(name, this.engineService, {});\n        break;\n    }\n\n    let satelliteCount = Number.parseInt(line[FILECOLUMNS.SATELLITES]);\n    let satellites = [];\n    let i = 1;\n\n    while (satellites.length < satelliteCount) {\n      let count = Number.parseInt(data[i].split(\" \").filter(i => i)[2]);\n      let subsystem = data.slice(i, i + count + 1);\n      satellites.push(this.parseSubsystem(subsystem, body));\n      i += 1 + count;\n    }\n\n    body.satellites = satellites;\n    body.button.onPointerClickObservable.add(event => this.orrery.setCameraTarget(body));\n    return body;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/rober/Documents/Computer Science/Side Projects/arcade/src/app/tools/orrery/system-loader.ts"],"names":["textToDate","Body","Planet","Star","Orbit","FILECOLUMNS","SystemLoader","constructor","filename","orrery","engineService","epochStart","Date","ready","scene","getScene","loadSystem","fetch","then","response","text","data","lines","split","lineNumber","Number","parseInt","root","parseSubsystem","slice","changeScale","scale","primary","line","filter","i","type","TYPE","name","NAME","mass","parseFloat","MASS_SIG","MASS_EXP","orbitalParameters","ascendingNode","ASCENDING_NODE","inclination","INCLINATION","periapsis","PERIAPSIS_ARGUMENT","semimajor","SEMIMAJOR_SIG","SEMIMAJOR_EXP","eccentricity","ECCENTRICITY","meanAnomaly","MEAN_ANOMALY","body","orbit","Error","satelliteCount","SATELLITES","satellites","length","count","subsystem","push","button","onPointerClickObservable","add","event","setCameraTarget"],"mappings":"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","sourcesContent":["import { textToDate } from \"src/app/utility/utilities\";\r\nimport { Body, Planet, Star } from \"./body\";\r\nimport { Orbit } from \"./orbit\";\r\nvar FILECOLUMNS;\r\n(function (FILECOLUMNS) {\r\n    FILECOLUMNS[FILECOLUMNS[\"TYPE\"] = 0] = \"TYPE\";\r\n    FILECOLUMNS[FILECOLUMNS[\"NAME\"] = 1] = \"NAME\";\r\n    FILECOLUMNS[FILECOLUMNS[\"SATELLITES\"] = 2] = \"SATELLITES\";\r\n    FILECOLUMNS[FILECOLUMNS[\"ASCENDING_NODE\"] = 3] = \"ASCENDING_NODE\";\r\n    FILECOLUMNS[FILECOLUMNS[\"INCLINATION\"] = 4] = \"INCLINATION\";\r\n    FILECOLUMNS[FILECOLUMNS[\"PERIAPSIS_ARGUMENT\"] = 5] = \"PERIAPSIS_ARGUMENT\";\r\n    FILECOLUMNS[FILECOLUMNS[\"SEMIMAJOR_SIG\"] = 6] = \"SEMIMAJOR_SIG\";\r\n    FILECOLUMNS[FILECOLUMNS[\"SEMIMAJOR_EXP\"] = 7] = \"SEMIMAJOR_EXP\";\r\n    FILECOLUMNS[FILECOLUMNS[\"ECCENTRICITY\"] = 8] = \"ECCENTRICITY\";\r\n    FILECOLUMNS[FILECOLUMNS[\"MEAN_ANOMALY\"] = 9] = \"MEAN_ANOMALY\";\r\n    FILECOLUMNS[FILECOLUMNS[\"MASS_SIG\"] = 10] = \"MASS_SIG\";\r\n    FILECOLUMNS[FILECOLUMNS[\"MASS_EXP\"] = 11] = \"MASS_EXP\";\r\n})(FILECOLUMNS || (FILECOLUMNS = {}));\r\nexport class SystemLoader {\r\n    constructor(filename, orrery, engineService) {\r\n        this.filename = filename;\r\n        this.orrery = orrery;\r\n        this.engineService = engineService;\r\n        this.epochStart = new Date();\r\n        this.ready = false;\r\n        this.scene = engineService.getScene();\r\n    }\r\n    async loadSystem() {\r\n        this.ready = false;\r\n        await fetch(this.filename)\r\n            .then(response => response.text())\r\n            .then(data => {\r\n            let lines = data.split('\\n');\r\n            let lineNumber = Number.parseInt(lines[1]);\r\n            this.epochStart = textToDate(lines[lineNumber]);\r\n            this.root = this.parseSubsystem(lines.slice(lineNumber + 2), null);\r\n            this.root.changeScale(this.orrery.scale);\r\n            this.ready = true;\r\n        });\r\n    }\r\n    parseSubsystem(data, primary) {\r\n        let line = data[0].split(\" \").filter(i => i);\r\n        let type = line[FILECOLUMNS.TYPE];\r\n        let name = line[FILECOLUMNS.NAME];\r\n        let mass = Number.parseFloat(line[FILECOLUMNS.MASS_SIG]) *\r\n            10 ** Number.parseInt(line[FILECOLUMNS.MASS_EXP]);\r\n        let orbitalParameters = {\r\n            ascendingNode: Number.parseFloat(line[FILECOLUMNS.ASCENDING_NODE]),\r\n            inclination: Number.parseFloat(line[FILECOLUMNS.INCLINATION]),\r\n            periapsis: Number.parseFloat(line[FILECOLUMNS.PERIAPSIS_ARGUMENT]),\r\n            semimajor: Number.parseFloat(line[FILECOLUMNS.SEMIMAJOR_SIG]) *\r\n                10 ** Number.parseInt(line[FILECOLUMNS.SEMIMAJOR_EXP]),\r\n            eccentricity: Number.parseFloat(line[FILECOLUMNS.ECCENTRICITY]),\r\n            meanAnomaly: Number.parseFloat(line[FILECOLUMNS.MEAN_ANOMALY]),\r\n        };\r\n        let body;\r\n        switch (type) {\r\n            case \"Star\":\r\n                body = new Star(name, this.engineService, { mass });\r\n                if (primary)\r\n                    body.orbit = new Orbit(name, primary, this.scene, orbitalParameters);\r\n                break;\r\n            case \"Planet\":\r\n                if (!primary)\r\n                    throw new Error(\"Planets must have a primary body to orbit!\");\r\n                body = new Planet(name, this.engineService, { mass }, new Orbit(name, primary, this.scene, orbitalParameters));\r\n                break;\r\n            default:\r\n                body = new Body(name, this.engineService, {});\r\n                break;\r\n        }\r\n        let satelliteCount = Number.parseInt(line[FILECOLUMNS.SATELLITES]);\r\n        let satellites = [];\r\n        let i = 1;\r\n        while (satellites.length < satelliteCount) {\r\n            let count = Number.parseInt(data[i].split(\" \").filter(i => i)[2]);\r\n            let subsystem = data.slice(i, i + count + 1);\r\n            satellites.push(this.parseSubsystem(subsystem, body));\r\n            i += 1 + count;\r\n        }\r\n        body.satellites = satellites;\r\n        body.button.onPointerClickObservable.add(event => this.orrery.setCameraTarget(body));\r\n        return body;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}