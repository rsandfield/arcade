{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Observable } from \"../../Misc/observable\";\nimport { FreeCamera } from \"../../Cameras/freeCamera\";\nimport { Camera } from \"../../Cameras/camera\";\nimport { Quaternion, Matrix, Vector3 } from \"../../Maths/math.vector\";\nimport { Gamepad } from \"../../Gamepads/gamepad\";\nimport { PoseEnabledControllerType } from \"../../Gamepads/Controllers/poseEnabledController\";\nimport { Node } from \"../../node\";\nimport { HemisphericLight } from \"../../Lights/hemisphericLight\";\nimport { Logger } from '../../Misc/logger';\nimport { VRMultiviewToSingleviewPostProcess } from '../../PostProcesses/vrMultiviewToSingleviewPostProcess'; // Side effect import to define the stereoscopic mode.\n\nimport \"../RigModes/webVRRigMode\"; // Side effect import to add webvr support to engine\n\nimport \"../../Engines/Extensions/engine.webVR\";\nimport { Tools } from '../../Misc/tools';\nNode.AddNodeConstructor(\"WebVRFreeCamera\", function (name, scene) {\n  return function () {\n    return new WebVRFreeCamera(name, Vector3.Zero(), scene);\n  };\n});\nNode.AddNodeConstructor(\"WebVRGamepadCamera\", function (name, scene) {\n  return function () {\n    return new WebVRFreeCamera(name, Vector3.Zero(), scene);\n  };\n});\n/**\r\n * This represents a WebVR camera.\r\n * The WebVR camera is Babylon's simple interface to interaction with Windows Mixed Reality, HTC Vive and Oculus Rift.\r\n * @example https://doc.babylonjs.com/how_to/webvr_camera\r\n */\n\nvar WebVRFreeCamera =\n/** @class */\nfunction (_super) {\n  __extends(WebVRFreeCamera, _super);\n  /**\r\n   * Instantiates a WebVRFreeCamera.\r\n   * @param name The name of the WebVRFreeCamera\r\n   * @param position The starting anchor position for the camera\r\n   * @param scene The scene the camera belongs to\r\n   * @param webVROptions a set of customizable options for the webVRCamera\r\n   */\n\n\n  function WebVRFreeCamera(name, position, scene, webVROptions) {\n    if (webVROptions === void 0) {\n      webVROptions = {};\n    }\n\n    var _this = _super.call(this, name, position, scene) || this;\n\n    _this.webVROptions = webVROptions;\n    /**\r\n     * @hidden\r\n     * The vrDisplay tied to the camera. See https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay\r\n     */\n\n    _this._vrDevice = null;\n    /**\r\n     * The rawPose of the vrDevice.\r\n     */\n\n    _this.rawPose = null;\n    _this._specsVersion = \"1.1\";\n    _this._attached = false;\n    _this._descendants = []; // Represents device position and rotation in room space. Should only be used to help calculate babylon space values\n\n    _this._deviceRoomPosition = Vector3.Zero();\n    /** @hidden */\n\n    _this._deviceRoomRotationQuaternion = Quaternion.Identity();\n    _this._standingMatrix = null;\n    /**\r\n     * Represents device position in babylon space.\r\n     */\n\n    _this.devicePosition = Vector3.Zero();\n    /**\r\n     * Represents device rotation in babylon space.\r\n     */\n\n    _this.deviceRotationQuaternion = Quaternion.Identity();\n    /**\r\n     * The scale of the device to be used when translating from device space to babylon space.\r\n     */\n\n    _this.deviceScaleFactor = 1;\n    _this._deviceToWorld = Matrix.Identity();\n    _this._worldToDevice = Matrix.Identity();\n    /**\r\n     * References to the webVR controllers for the vrDevice.\r\n     */\n\n    _this.controllers = [];\n    /**\r\n     * Emits an event when a controller is attached.\r\n     */\n\n    _this.onControllersAttachedObservable = new Observable();\n    /**\r\n     * Emits an event when a controller's mesh has been loaded;\r\n     */\n\n    _this.onControllerMeshLoadedObservable = new Observable();\n    /**\r\n     * Emits an event when the HMD's pose has been updated.\r\n     */\n\n    _this.onPoseUpdatedFromDeviceObservable = new Observable();\n    _this._poseSet = false;\n    /**\r\n     * If the rig cameras be used as parent instead of this camera.\r\n     */\n\n    _this.rigParenting = true;\n    _this._defaultHeight = undefined;\n\n    _this._detachIfAttached = function () {\n      var vrDisplay = _this.getEngine().getVRDevice();\n\n      if (vrDisplay && !vrDisplay.isPresenting) {\n        _this.detachControl();\n      }\n    };\n\n    _this._workingVector = Vector3.Zero();\n    _this._oneVector = Vector3.One();\n    _this._workingMatrix = Matrix.Identity();\n    _this._tmpMatrix = new Matrix();\n    _this._cache.position = Vector3.Zero();\n\n    if (webVROptions.defaultHeight) {\n      _this._defaultHeight = webVROptions.defaultHeight;\n      _this.position.y = _this._defaultHeight;\n    }\n\n    _this.minZ = 0.1; //legacy support - the compensation boolean was removed.\n\n    if (arguments.length === 5) {\n      _this.webVROptions = arguments[4];\n    } // default webVR options\n\n\n    if (_this.webVROptions.trackPosition == undefined) {\n      _this.webVROptions.trackPosition = true;\n    }\n\n    if (_this.webVROptions.controllerMeshes == undefined) {\n      _this.webVROptions.controllerMeshes = true;\n    }\n\n    if (_this.webVROptions.defaultLightingOnControllers == undefined) {\n      _this.webVROptions.defaultLightingOnControllers = true;\n    }\n\n    _this.rotationQuaternion = new Quaternion();\n\n    if (_this.webVROptions && _this.webVROptions.positionScale) {\n      _this.deviceScaleFactor = _this.webVROptions.positionScale;\n    } //enable VR\n\n\n    var engine = _this.getEngine();\n\n    _this._onVREnabled = function (success) {\n      if (success) {\n        _this.initControllers();\n      }\n    };\n\n    engine.onVRRequestPresentComplete.add(_this._onVREnabled);\n    engine.initWebVR().add(function (event) {\n      if (!event.vrDisplay || _this._vrDevice === event.vrDisplay) {\n        return;\n      }\n\n      _this._vrDevice = event.vrDisplay; //reset the rig parameters.\n\n      _this.setCameraRigMode(Camera.RIG_MODE_WEBVR, {\n        parentCamera: _this,\n        vrDisplay: _this._vrDevice,\n        frameData: _this._frameData,\n        specs: _this._specsVersion\n      });\n\n      if (_this._attached) {\n        _this.getEngine().enableVR(_this.webVROptions);\n      }\n    });\n\n    if (typeof VRFrameData !== \"undefined\") {\n      _this._frameData = new VRFrameData();\n    }\n\n    if (webVROptions.useMultiview) {\n      if (!_this.getScene().getEngine().getCaps().multiview) {\n        Logger.Warn(\"Multiview is not supported, falling back to standard rendering\");\n        _this._useMultiviewToSingleView = false;\n      } else {\n        _this._useMultiviewToSingleView = true;\n        _this._rigPostProcess = new VRMultiviewToSingleviewPostProcess(\"VRMultiviewToSingleview\", _this, 1.0);\n      }\n    }\n    /**\r\n     * The idea behind the following lines:\r\n     * objects that have the camera as parent should actually have the rig cameras as a parent.\r\n     * BUT, each of those cameras has a different view matrix, which means that if we set the parent to the first rig camera,\r\n     * the second will not show it correctly.\r\n     *\r\n     * To solve this - each object that has the camera as parent will be added to a protected array.\r\n     * When the rig camera renders, it will take this array and set all of those to be its children.\r\n     * This way, the right camera will be used as a parent, and the mesh will be rendered correctly.\r\n     * Amazing!\r\n     */\n\n\n    scene.onBeforeCameraRenderObservable.add(function (camera) {\n      if (camera.parent === _this && _this.rigParenting) {\n        _this._descendants = _this.getDescendants(true, function (n) {\n          // don't take the cameras or the controllers!\n          var isController = _this.controllers.some(function (controller) {\n            return controller._mesh === n;\n          });\n\n          var isRigCamera = _this._rigCameras.indexOf(n) !== -1;\n          return !isController && !isRigCamera;\n        });\n\n        _this._descendants.forEach(function (node) {\n          node.parent = camera;\n        });\n      }\n    });\n    scene.onAfterCameraRenderObservable.add(function (camera) {\n      if (camera.parent === _this && _this.rigParenting) {\n        _this._descendants.forEach(function (node) {\n          node.parent = _this;\n        });\n      }\n    });\n    return _this;\n  }\n  /**\r\n   * Gets the device distance from the ground in meters.\r\n   * @returns the distance in meters from the vrDevice to ground in device space. If standing matrix is not supported for the vrDevice 0 is returned.\r\n   */\n\n\n  WebVRFreeCamera.prototype.deviceDistanceToRoomGround = function () {\n    if (this._standingMatrix) {\n      // Add standing matrix offset to get real offset from ground in room\n      this._standingMatrix.getTranslationToRef(this._workingVector);\n\n      return this._deviceRoomPosition.y + this._workingVector.y;\n    } //If VRDisplay does not inform stage parameters and no default height is set we fallback to zero.\n\n\n    return this._defaultHeight || 0;\n  };\n  /**\r\n   * Enables the standing matrix when supported. This can be used to position the user's view the correct height from the ground.\r\n   * @param callback will be called when the standing matrix is set. Callback parameter is if the standing matrix is supported.\r\n   */\n\n\n  WebVRFreeCamera.prototype.useStandingMatrix = function (callback) {\n    var _this = this;\n\n    if (callback === void 0) {\n      callback = function (bool) {};\n    } // Use standing matrix if available\n\n\n    this.getEngine().initWebVRAsync().then(function (result) {\n      if (!result.vrDisplay || !result.vrDisplay.stageParameters || !result.vrDisplay.stageParameters.sittingToStandingTransform || !_this.webVROptions.trackPosition) {\n        callback(false);\n      } else {\n        _this._standingMatrix = new Matrix();\n        Matrix.FromFloat32ArrayToRefScaled(result.vrDisplay.stageParameters.sittingToStandingTransform, 0, 1, _this._standingMatrix);\n\n        if (!_this.getScene().useRightHandedSystem) {\n          if (_this._standingMatrix) {\n            _this._standingMatrix.toggleModelMatrixHandInPlace();\n          }\n        }\n\n        callback(true);\n      }\n    });\n  };\n  /**\r\n   * Enables the standing matrix when supported. This can be used to position the user's view the correct height from the ground.\r\n   * @returns A promise with a boolean set to if the standing matrix is supported.\r\n   */\n\n\n  WebVRFreeCamera.prototype.useStandingMatrixAsync = function () {\n    var _this = this;\n\n    return new Promise(function (res) {\n      _this.useStandingMatrix(function (supported) {\n        res(supported);\n      });\n    });\n  };\n  /**\r\n   * Disposes the camera\r\n   */\n\n\n  WebVRFreeCamera.prototype.dispose = function () {\n    this._detachIfAttached();\n\n    this.getEngine().onVRRequestPresentComplete.removeCallback(this._onVREnabled);\n\n    if (this._updateCacheWhenTrackingDisabledObserver) {\n      this._scene.onBeforeRenderObservable.remove(this._updateCacheWhenTrackingDisabledObserver);\n    }\n\n    _super.prototype.dispose.call(this);\n  };\n  /**\r\n   * Gets a vrController by name.\r\n   * @param name The name of the controller to retreive\r\n   * @returns the controller matching the name specified or null if not found\r\n   */\n\n\n  WebVRFreeCamera.prototype.getControllerByName = function (name) {\n    for (var _i = 0, _a = this.controllers; _i < _a.length; _i++) {\n      var gp = _a[_i];\n\n      if (gp.hand === name) {\n        return gp;\n      }\n    }\n\n    return null;\n  };\n\n  Object.defineProperty(WebVRFreeCamera.prototype, \"leftController\", {\n    /**\r\n     * The controller corresponding to the users left hand.\r\n     */\n    get: function () {\n      if (!this._leftController) {\n        this._leftController = this.getControllerByName(\"left\");\n      }\n\n      return this._leftController;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebVRFreeCamera.prototype, \"rightController\", {\n    /**\r\n     * The controller corresponding to the users right hand.\r\n     */\n    get: function () {\n      if (!this._rightController) {\n        this._rightController = this.getControllerByName(\"right\");\n      }\n\n      return this._rightController;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Casts a ray forward from the vrCamera's gaze.\r\n   * @param length Length of the ray (default: 100)\r\n   * @returns the ray corresponding to the gaze\r\n   */\n\n  WebVRFreeCamera.prototype.getForwardRay = function (length) {\n    if (length === void 0) {\n      length = 100;\n    }\n\n    if (this.leftCamera) {\n      // Use left eye to avoid computation to compute center on every call\n      return _super.prototype.getForwardRay.call(this, length, this.leftCamera.getWorldMatrix(), this.leftCamera.globalPosition); // Need the actual rendered camera\n    } else {\n      return _super.prototype.getForwardRay.call(this, length);\n    }\n  };\n  /**\r\n   * @hidden\r\n   * Updates the camera based on device's frame data\r\n   */\n\n\n  WebVRFreeCamera.prototype._checkInputs = function () {\n    if (this._vrDevice && this._vrDevice.isPresenting) {\n      this._vrDevice.getFrameData(this._frameData);\n\n      this.updateFromDevice(this._frameData.pose);\n    }\n\n    _super.prototype._checkInputs.call(this);\n  };\n  /**\r\n   * Updates the poseControlled values based on the input device pose.\r\n   * @param poseData Pose coming from the device\r\n   */\n\n\n  WebVRFreeCamera.prototype.updateFromDevice = function (poseData) {\n    if (poseData && poseData.orientation && poseData.orientation.length === 4) {\n      this.rawPose = poseData;\n\n      this._deviceRoomRotationQuaternion.copyFromFloats(poseData.orientation[0], poseData.orientation[1], -poseData.orientation[2], -poseData.orientation[3]);\n\n      if (this.getScene().useRightHandedSystem) {\n        this._deviceRoomRotationQuaternion.z *= -1;\n        this._deviceRoomRotationQuaternion.w *= -1;\n      }\n\n      if (this.webVROptions.trackPosition && this.rawPose.position) {\n        this._deviceRoomPosition.copyFromFloats(this.rawPose.position[0], this.rawPose.position[1], -this.rawPose.position[2]);\n\n        if (this.getScene().useRightHandedSystem) {\n          this._deviceRoomPosition.z *= -1;\n        }\n      }\n\n      this._poseSet = true;\n    }\n  };\n  /**\r\n   * WebVR's attach control will start broadcasting frames to the device.\r\n   * Note that in certain browsers (chrome for example) this function must be called\r\n   * within a user-interaction callback. Example:\r\n   * <pre> scene.onPointerDown = function() { camera.attachControl(canvas); }</pre>\r\n   *\r\n   * @param noPreventDefault prevent the default html element operation when attaching the vrDevice\r\n   */\n\n\n  WebVRFreeCamera.prototype.attachControl = function (noPreventDefault) {\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n\n    _super.prototype.attachControl.call(this, noPreventDefault);\n\n    this._attached = true;\n    noPreventDefault = Camera.ForceAttachControlToAlwaysPreventDefault ? false : noPreventDefault;\n\n    if (this._vrDevice) {\n      this.getEngine().enableVR(this.webVROptions);\n    }\n\n    var hostWindow = this._scene.getEngine().getHostWindow();\n\n    if (hostWindow) {\n      hostWindow.addEventListener('vrdisplaypresentchange', this._detachIfAttached);\n    }\n  };\n  /**\r\n   * Detach the current controls from the specified dom element.\r\n   * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n   */\n\n\n  WebVRFreeCamera.prototype.detachControl = function (ignored) {\n    this.getScene().gamepadManager.onGamepadConnectedObservable.remove(this._onGamepadConnectedObserver);\n    this.getScene().gamepadManager.onGamepadDisconnectedObservable.remove(this._onGamepadDisconnectedObserver);\n\n    _super.prototype.detachControl.call(this);\n\n    this._attached = false;\n    this.getEngine().disableVR();\n    window.removeEventListener('vrdisplaypresentchange', this._detachIfAttached);\n  };\n  /**\r\n   * @returns the name of this class\r\n   */\n\n\n  WebVRFreeCamera.prototype.getClassName = function () {\n    return \"WebVRFreeCamera\";\n  };\n  /**\r\n   * Calls resetPose on the vrDisplay\r\n   * See: https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/resetPose\r\n   */\n\n\n  WebVRFreeCamera.prototype.resetToCurrentRotation = function () {\n    //uses the vrDisplay's \"resetPose()\".\n    //pitch and roll won't be affected.\n    this._vrDevice.resetPose();\n  };\n  /**\r\n   * @hidden\r\n   * Updates the rig cameras (left and right eye)\r\n   */\n\n\n  WebVRFreeCamera.prototype._updateRigCameras = function () {\n    var camLeft = this._rigCameras[0];\n    var camRight = this._rigCameras[1];\n    camLeft.rotationQuaternion.copyFrom(this._deviceRoomRotationQuaternion);\n    camRight.rotationQuaternion.copyFrom(this._deviceRoomRotationQuaternion);\n    camLeft.position.copyFrom(this._deviceRoomPosition);\n    camRight.position.copyFrom(this._deviceRoomPosition);\n  }; // Remove translation from 6dof headset if trackposition is set to false\n\n\n  WebVRFreeCamera.prototype._correctPositionIfNotTrackPosition = function (matrix, isViewMatrix) {\n    if (isViewMatrix === void 0) {\n      isViewMatrix = false;\n    }\n\n    if (this.rawPose && this.rawPose.position && !this.webVROptions.trackPosition) {\n      Matrix.TranslationToRef(this.rawPose.position[0], this.rawPose.position[1], -this.rawPose.position[2], this._tmpMatrix);\n\n      if (!isViewMatrix) {\n        this._tmpMatrix.invert();\n      }\n\n      this._tmpMatrix.multiplyToRef(matrix, matrix);\n    }\n  };\n  /**\r\n   * @hidden\r\n   * Updates the cached values of the camera\r\n   * @param ignoreParentClass ignores updating the parent class's cache (default: false)\r\n   */\n\n\n  WebVRFreeCamera.prototype._updateCache = function (ignoreParentClass) {\n    var _this = this;\n\n    if (!this.rotationQuaternion.equals(this._cache.rotationQuaternion) || !this.position.equals(this._cache.position)) {\n      // Update to ensure devicePosition is up to date with most recent _deviceRoomPosition\n      if (!this.updateCacheCalled) {\n        // make sure it is only called once per loop. this.update() might cause an infinite loop.\n        this.updateCacheCalled = true;\n        this.update();\n      } // Set working vector to the device position in room space rotated by the new rotation\n\n\n      this.rotationQuaternion.toRotationMatrix(this._workingMatrix);\n      Vector3.TransformCoordinatesToRef(this._deviceRoomPosition, this._workingMatrix, this._workingVector); // Subtract this vector from the current device position in world to get the translation for the device world matrix\n\n      this.devicePosition.subtractToRef(this._workingVector, this._workingVector);\n      Matrix.ComposeToRef(this._oneVector, this.rotationQuaternion, this._workingVector, this._deviceToWorld); // Add translation from anchor position\n\n      this._deviceToWorld.getTranslationToRef(this._workingVector);\n\n      this._workingVector.addInPlace(this.position);\n\n      this._workingVector.subtractInPlace(this._cache.position);\n\n      this._deviceToWorld.setTranslation(this._workingVector); // Set an inverted matrix to be used when updating the camera\n\n\n      this._deviceToWorld.invertToRef(this._worldToDevice); // Update the gamepad to ensure the mesh is updated on the same frame as camera\n\n\n      this.controllers.forEach(function (controller) {\n        controller._deviceToWorld.copyFrom(_this._deviceToWorld);\n\n        _this._correctPositionIfNotTrackPosition(controller._deviceToWorld);\n\n        controller.update();\n      });\n    }\n\n    if (!ignoreParentClass) {\n      _super.prototype._updateCache.call(this);\n    }\n\n    this.updateCacheCalled = false;\n  };\n  /**\r\n   * @hidden\r\n   * Get current device position in babylon world\r\n   */\n\n\n  WebVRFreeCamera.prototype._computeDevicePosition = function () {\n    Vector3.TransformCoordinatesToRef(this._deviceRoomPosition, this._deviceToWorld, this.devicePosition);\n  };\n  /**\r\n   * Updates the current device position and rotation in the babylon world\r\n   */\n\n\n  WebVRFreeCamera.prototype.update = function () {\n    this._computeDevicePosition(); // Get current device rotation in babylon world\n\n\n    Matrix.FromQuaternionToRef(this._deviceRoomRotationQuaternion, this._workingMatrix);\n\n    this._workingMatrix.multiplyToRef(this._deviceToWorld, this._workingMatrix);\n\n    Quaternion.FromRotationMatrixToRef(this._workingMatrix, this.deviceRotationQuaternion);\n\n    if (this._poseSet) {\n      this.onPoseUpdatedFromDeviceObservable.notifyObservers(null);\n    }\n\n    _super.prototype.update.call(this);\n  };\n  /**\r\n   * @hidden\r\n   * Gets the view matrix of this camera (Always set to identity as left and right eye cameras contain the actual view matrix)\r\n   * @returns an identity matrix\r\n   */\n\n\n  WebVRFreeCamera.prototype._getViewMatrix = function () {\n    return Matrix.Identity();\n  };\n  /**\r\n   * This function is called by the two RIG cameras.\r\n   * 'this' is the left or right camera (and NOT (!!!) the WebVRFreeCamera instance)\r\n   * @hidden\r\n   */\n\n\n  WebVRFreeCamera.prototype._getWebVRViewMatrix = function () {\n    // Update the parent camera prior to using a child camera to avoid desynchronization\n    var parentCamera = this._cameraRigParams[\"parentCamera\"];\n\n    parentCamera._updateCache(); //WebVR 1.1\n\n\n    var viewArray = this._cameraRigParams[\"left\"] ? this._cameraRigParams[\"frameData\"].leftViewMatrix : this._cameraRigParams[\"frameData\"].rightViewMatrix;\n    Matrix.FromArrayToRef(viewArray, 0, this._webvrViewMatrix);\n\n    if (!this.getScene().useRightHandedSystem) {\n      this._webvrViewMatrix.toggleModelMatrixHandInPlace();\n    } // update the camera rotation matrix\n\n\n    this._webvrViewMatrix.getRotationMatrixToRef(this._cameraRotationMatrix);\n\n    Vector3.TransformCoordinatesToRef(this._referencePoint, this._cameraRotationMatrix, this._transformedReferencePoint); // Computing target and final matrix\n\n    this.position.addToRef(this._transformedReferencePoint, this._currentTarget); // should the view matrix be updated with scale and position offset?\n\n    if (parentCamera.deviceScaleFactor !== 1) {\n      this._webvrViewMatrix.invert(); // scale the position, if set\n\n\n      if (parentCamera.deviceScaleFactor) {\n        this._webvrViewMatrix.multiplyAtIndex(12, parentCamera.deviceScaleFactor);\n\n        this._webvrViewMatrix.multiplyAtIndex(13, parentCamera.deviceScaleFactor);\n\n        this._webvrViewMatrix.multiplyAtIndex(14, parentCamera.deviceScaleFactor);\n      }\n\n      this._webvrViewMatrix.invert();\n    } // Remove translation from 6dof headset if trackposition is set to false\n\n\n    parentCamera._correctPositionIfNotTrackPosition(this._webvrViewMatrix, true);\n\n    parentCamera._worldToDevice.multiplyToRef(this._webvrViewMatrix, this._webvrViewMatrix); // Compute global position\n\n\n    this._workingMatrix = this._workingMatrix || Matrix.Identity();\n\n    this._webvrViewMatrix.invertToRef(this._workingMatrix);\n\n    this._workingMatrix.multiplyToRef(parentCamera.getWorldMatrix(), this._workingMatrix);\n\n    this._workingMatrix.getTranslationToRef(this._globalPosition);\n\n    this._markSyncedWithParent();\n\n    return this._webvrViewMatrix;\n  };\n  /** @hidden */\n\n\n  WebVRFreeCamera.prototype._getWebVRProjectionMatrix = function () {\n    var parentCamera = this.parent;\n    parentCamera._vrDevice.depthNear = parentCamera.minZ;\n    parentCamera._vrDevice.depthFar = parentCamera.maxZ;\n    var projectionArray = this._cameraRigParams[\"left\"] ? this._cameraRigParams[\"frameData\"].leftProjectionMatrix : this._cameraRigParams[\"frameData\"].rightProjectionMatrix;\n    Matrix.FromArrayToRef(projectionArray, 0, this._projectionMatrix); //babylon compatible matrix\n\n    if (!this.getScene().useRightHandedSystem) {\n      this._projectionMatrix.toggleProjectionMatrixHandInPlace();\n    }\n\n    return this._projectionMatrix;\n  };\n  /**\r\n   * Initializes the controllers and their meshes\r\n   */\n\n\n  WebVRFreeCamera.prototype.initControllers = function () {\n    var _this = this;\n\n    this.controllers = [];\n    var manager = this.getScene().gamepadManager;\n    this._onGamepadDisconnectedObserver = manager.onGamepadDisconnectedObservable.add(function (gamepad) {\n      if (gamepad.type === Gamepad.POSE_ENABLED) {\n        var webVrController = gamepad;\n\n        if (webVrController.defaultModel) {\n          webVrController.defaultModel.setEnabled(false);\n        }\n\n        if (webVrController.hand === \"right\") {\n          _this._rightController = null;\n        }\n\n        if (webVrController.hand === \"left\") {\n          _this._leftController = null;\n        }\n\n        var controllerIndex = _this.controllers.indexOf(webVrController);\n\n        if (controllerIndex !== -1) {\n          _this.controllers.splice(controllerIndex, 1);\n        }\n      }\n    });\n    this._onGamepadConnectedObserver = manager.onGamepadConnectedObservable.add(function (gamepad) {\n      if (gamepad.type === Gamepad.POSE_ENABLED) {\n        var webVrController_1 = gamepad;\n\n        if (!_this.webVROptions.trackPosition) {\n          webVrController_1._disableTrackPosition(new Vector3(webVrController_1.hand == \"left\" ? -0.15 : 0.15, -0.5, 0.25)); // Cache must be updated before rendering controllers to avoid them being one frame behind\n\n\n          if (!_this._updateCacheWhenTrackingDisabledObserver) {\n            _this._updateCacheWhenTrackingDisabledObserver = _this._scene.onBeforeRenderObservable.add(function () {\n              _this._updateCache();\n            });\n          }\n        }\n\n        webVrController_1.deviceScaleFactor = _this.deviceScaleFactor;\n\n        webVrController_1._deviceToWorld.copyFrom(_this._deviceToWorld);\n\n        _this._correctPositionIfNotTrackPosition(webVrController_1._deviceToWorld);\n\n        if (_this.webVROptions.controllerMeshes) {\n          if (webVrController_1.defaultModel) {\n            webVrController_1.defaultModel.setEnabled(true);\n          } else {\n            // Load the meshes\n            webVrController_1.initControllerMesh(_this.getScene(), function (loadedMesh) {\n              loadedMesh.scaling.scaleInPlace(_this.deviceScaleFactor);\n\n              _this.onControllerMeshLoadedObservable.notifyObservers(webVrController_1);\n\n              if (_this.webVROptions.defaultLightingOnControllers) {\n                if (!_this._lightOnControllers) {\n                  _this._lightOnControllers = new HemisphericLight(\"vrControllersLight\", new Vector3(0, 1, 0), _this.getScene());\n                }\n\n                var activateLightOnSubMeshes_1 = function (mesh, light) {\n                  var children = mesh.getChildren();\n\n                  if (children && children.length !== 0) {\n                    children.forEach(function (mesh) {\n                      light.includedOnlyMeshes.push(mesh);\n                      activateLightOnSubMeshes_1(mesh, light);\n                    });\n                  }\n                };\n\n                _this._lightOnControllers.includedOnlyMeshes.push(loadedMesh);\n\n                activateLightOnSubMeshes_1(loadedMesh, _this._lightOnControllers);\n              }\n            });\n          }\n        }\n\n        webVrController_1.attachToPoseControlledCamera(_this); // since this is async - sanity check. Is the controller already stored?\n\n        if (_this.controllers.indexOf(webVrController_1) === -1) {\n          //add to the controllers array\n          _this.controllers.push(webVrController_1); // Forced to add some control code for Vive as it doesn't always fill properly the \"hand\" property\n          // Sometimes, both controllers are set correctly (left and right), sometimes none, sometimes only one of them...\n          // So we're overriding setting left & right manually to be sure\n\n\n          var firstViveWandDetected = false;\n\n          for (var i = 0; i < _this.controllers.length; i++) {\n            if (_this.controllers[i].controllerType === PoseEnabledControllerType.VIVE) {\n              if (!firstViveWandDetected) {\n                firstViveWandDetected = true;\n                _this.controllers[i].hand = \"left\";\n              } else {\n                _this.controllers[i].hand = \"right\";\n              }\n            }\n          } //did we find enough controllers? Great! let the developer know.\n\n\n          if (_this.controllers.length >= 2) {\n            _this.onControllersAttachedObservable.notifyObservers(_this.controllers);\n          }\n        }\n      }\n    });\n  };\n\n  return WebVRFreeCamera;\n}(FreeCamera);\n\nexport { WebVRFreeCamera };","map":{"version":3,"sources":["C:/Users/rober/Documents/Computer Science/Side Projects/arcade/node_modules/@babylonjs/core/Cameras/VR/webVRCamera.js"],"names":["__extends","Observable","FreeCamera","Camera","Quaternion","Matrix","Vector3","Gamepad","PoseEnabledControllerType","Node","HemisphericLight","Logger","VRMultiviewToSingleviewPostProcess","Tools","AddNodeConstructor","name","scene","WebVRFreeCamera","Zero","_super","position","webVROptions","_this","call","_vrDevice","rawPose","_specsVersion","_attached","_descendants","_deviceRoomPosition","_deviceRoomRotationQuaternion","Identity","_standingMatrix","devicePosition","deviceRotationQuaternion","deviceScaleFactor","_deviceToWorld","_worldToDevice","controllers","onControllersAttachedObservable","onControllerMeshLoadedObservable","onPoseUpdatedFromDeviceObservable","_poseSet","rigParenting","_defaultHeight","undefined","_detachIfAttached","vrDisplay","getEngine","getVRDevice","isPresenting","detachControl","_workingVector","_oneVector","One","_workingMatrix","_tmpMatrix","_cache","defaultHeight","y","minZ","arguments","length","trackPosition","controllerMeshes","defaultLightingOnControllers","rotationQuaternion","positionScale","engine","_onVREnabled","success","initControllers","onVRRequestPresentComplete","add","initWebVR","event","setCameraRigMode","RIG_MODE_WEBVR","parentCamera","frameData","_frameData","specs","enableVR","VRFrameData","useMultiview","getScene","getCaps","multiview","Warn","_useMultiviewToSingleView","_rigPostProcess","onBeforeCameraRenderObservable","camera","parent","getDescendants","n","isController","some","controller","_mesh","isRigCamera","_rigCameras","indexOf","forEach","node","onAfterCameraRenderObservable","prototype","deviceDistanceToRoomGround","getTranslationToRef","useStandingMatrix","callback","bool","initWebVRAsync","then","result","stageParameters","sittingToStandingTransform","FromFloat32ArrayToRefScaled","useRightHandedSystem","toggleModelMatrixHandInPlace","useStandingMatrixAsync","Promise","res","supported","dispose","removeCallback","_updateCacheWhenTrackingDisabledObserver","_scene","onBeforeRenderObservable","remove","getControllerByName","_i","_a","gp","hand","Object","defineProperty","get","_leftController","enumerable","configurable","_rightController","getForwardRay","leftCamera","getWorldMatrix","globalPosition","_checkInputs","getFrameData","updateFromDevice","pose","poseData","orientation","copyFromFloats","z","w","attachControl","noPreventDefault","BackCompatCameraNoPreventDefault","ForceAttachControlToAlwaysPreventDefault","hostWindow","getHostWindow","addEventListener","ignored","gamepadManager","onGamepadConnectedObservable","_onGamepadConnectedObserver","onGamepadDisconnectedObservable","_onGamepadDisconnectedObserver","disableVR","window","removeEventListener","getClassName","resetToCurrentRotation","resetPose","_updateRigCameras","camLeft","camRight","copyFrom","_correctPositionIfNotTrackPosition","matrix","isViewMatrix","TranslationToRef","invert","multiplyToRef","_updateCache","ignoreParentClass","equals","updateCacheCalled","update","toRotationMatrix","TransformCoordinatesToRef","subtractToRef","ComposeToRef","addInPlace","subtractInPlace","setTranslation","invertToRef","_computeDevicePosition","FromQuaternionToRef","FromRotationMatrixToRef","notifyObservers","_getViewMatrix","_getWebVRViewMatrix","_cameraRigParams","viewArray","leftViewMatrix","rightViewMatrix","FromArrayToRef","_webvrViewMatrix","getRotationMatrixToRef","_cameraRotationMatrix","_referencePoint","_transformedReferencePoint","addToRef","_currentTarget","multiplyAtIndex","_globalPosition","_markSyncedWithParent","_getWebVRProjectionMatrix","depthNear","depthFar","maxZ","projectionArray","leftProjectionMatrix","rightProjectionMatrix","_projectionMatrix","toggleProjectionMatrixHandInPlace","manager","gamepad","type","POSE_ENABLED","webVrController","defaultModel","setEnabled","controllerIndex","splice","webVrController_1","_disableTrackPosition","initControllerMesh","loadedMesh","scaling","scaleInPlace","_lightOnControllers","activateLightOnSubMeshes_1","mesh","light","children","getChildren","includedOnlyMeshes","push","attachToPoseControlledCamera","firstViveWandDetected","i","controllerType","VIVE"],"mappings":"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","sourcesContent":["import { __extends } from \"tslib\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { FreeCamera } from \"../../Cameras/freeCamera\";\r\nimport { Camera } from \"../../Cameras/camera\";\r\nimport { Quaternion, Matrix, Vector3 } from \"../../Maths/math.vector\";\r\nimport { Gamepad } from \"../../Gamepads/gamepad\";\r\nimport { PoseEnabledControllerType } from \"../../Gamepads/Controllers/poseEnabledController\";\r\nimport { Node } from \"../../node\";\r\nimport { HemisphericLight } from \"../../Lights/hemisphericLight\";\r\nimport { Logger } from '../../Misc/logger';\r\nimport { VRMultiviewToSingleviewPostProcess } from '../../PostProcesses/vrMultiviewToSingleviewPostProcess';\r\n// Side effect import to define the stereoscopic mode.\r\nimport \"../RigModes/webVRRigMode\";\r\n// Side effect import to add webvr support to engine\r\nimport \"../../Engines/Extensions/engine.webVR\";\r\nimport { Tools } from '../../Misc/tools';\r\nNode.AddNodeConstructor(\"WebVRFreeCamera\", function (name, scene) {\r\n    return function () { return new WebVRFreeCamera(name, Vector3.Zero(), scene); };\r\n});\r\nNode.AddNodeConstructor(\"WebVRGamepadCamera\", function (name, scene) {\r\n    return function () { return new WebVRFreeCamera(name, Vector3.Zero(), scene); };\r\n});\r\n/**\r\n * This represents a WebVR camera.\r\n * The WebVR camera is Babylon's simple interface to interaction with Windows Mixed Reality, HTC Vive and Oculus Rift.\r\n * @example https://doc.babylonjs.com/how_to/webvr_camera\r\n */\r\nvar WebVRFreeCamera = /** @class */ (function (_super) {\r\n    __extends(WebVRFreeCamera, _super);\r\n    /**\r\n     * Instantiates a WebVRFreeCamera.\r\n     * @param name The name of the WebVRFreeCamera\r\n     * @param position The starting anchor position for the camera\r\n     * @param scene The scene the camera belongs to\r\n     * @param webVROptions a set of customizable options for the webVRCamera\r\n     */\r\n    function WebVRFreeCamera(name, position, scene, webVROptions) {\r\n        if (webVROptions === void 0) { webVROptions = {}; }\r\n        var _this = _super.call(this, name, position, scene) || this;\r\n        _this.webVROptions = webVROptions;\r\n        /**\r\n         * @hidden\r\n         * The vrDisplay tied to the camera. See https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay\r\n         */\r\n        _this._vrDevice = null;\r\n        /**\r\n         * The rawPose of the vrDevice.\r\n         */\r\n        _this.rawPose = null;\r\n        _this._specsVersion = \"1.1\";\r\n        _this._attached = false;\r\n        _this._descendants = [];\r\n        // Represents device position and rotation in room space. Should only be used to help calculate babylon space values\r\n        _this._deviceRoomPosition = Vector3.Zero();\r\n        /** @hidden */\r\n        _this._deviceRoomRotationQuaternion = Quaternion.Identity();\r\n        _this._standingMatrix = null;\r\n        /**\r\n         * Represents device position in babylon space.\r\n         */\r\n        _this.devicePosition = Vector3.Zero();\r\n        /**\r\n         * Represents device rotation in babylon space.\r\n         */\r\n        _this.deviceRotationQuaternion = Quaternion.Identity();\r\n        /**\r\n         * The scale of the device to be used when translating from device space to babylon space.\r\n         */\r\n        _this.deviceScaleFactor = 1;\r\n        _this._deviceToWorld = Matrix.Identity();\r\n        _this._worldToDevice = Matrix.Identity();\r\n        /**\r\n         * References to the webVR controllers for the vrDevice.\r\n         */\r\n        _this.controllers = [];\r\n        /**\r\n         * Emits an event when a controller is attached.\r\n         */\r\n        _this.onControllersAttachedObservable = new Observable();\r\n        /**\r\n         * Emits an event when a controller's mesh has been loaded;\r\n         */\r\n        _this.onControllerMeshLoadedObservable = new Observable();\r\n        /**\r\n         * Emits an event when the HMD's pose has been updated.\r\n         */\r\n        _this.onPoseUpdatedFromDeviceObservable = new Observable();\r\n        _this._poseSet = false;\r\n        /**\r\n         * If the rig cameras be used as parent instead of this camera.\r\n         */\r\n        _this.rigParenting = true;\r\n        _this._defaultHeight = undefined;\r\n        _this._detachIfAttached = function () {\r\n            var vrDisplay = _this.getEngine().getVRDevice();\r\n            if (vrDisplay && !vrDisplay.isPresenting) {\r\n                _this.detachControl();\r\n            }\r\n        };\r\n        _this._workingVector = Vector3.Zero();\r\n        _this._oneVector = Vector3.One();\r\n        _this._workingMatrix = Matrix.Identity();\r\n        _this._tmpMatrix = new Matrix();\r\n        _this._cache.position = Vector3.Zero();\r\n        if (webVROptions.defaultHeight) {\r\n            _this._defaultHeight = webVROptions.defaultHeight;\r\n            _this.position.y = _this._defaultHeight;\r\n        }\r\n        _this.minZ = 0.1;\r\n        //legacy support - the compensation boolean was removed.\r\n        if (arguments.length === 5) {\r\n            _this.webVROptions = arguments[4];\r\n        }\r\n        // default webVR options\r\n        if (_this.webVROptions.trackPosition == undefined) {\r\n            _this.webVROptions.trackPosition = true;\r\n        }\r\n        if (_this.webVROptions.controllerMeshes == undefined) {\r\n            _this.webVROptions.controllerMeshes = true;\r\n        }\r\n        if (_this.webVROptions.defaultLightingOnControllers == undefined) {\r\n            _this.webVROptions.defaultLightingOnControllers = true;\r\n        }\r\n        _this.rotationQuaternion = new Quaternion();\r\n        if (_this.webVROptions && _this.webVROptions.positionScale) {\r\n            _this.deviceScaleFactor = _this.webVROptions.positionScale;\r\n        }\r\n        //enable VR\r\n        var engine = _this.getEngine();\r\n        _this._onVREnabled = function (success) { if (success) {\r\n            _this.initControllers();\r\n        } };\r\n        engine.onVRRequestPresentComplete.add(_this._onVREnabled);\r\n        engine.initWebVR().add(function (event) {\r\n            if (!event.vrDisplay || _this._vrDevice === event.vrDisplay) {\r\n                return;\r\n            }\r\n            _this._vrDevice = event.vrDisplay;\r\n            //reset the rig parameters.\r\n            _this.setCameraRigMode(Camera.RIG_MODE_WEBVR, { parentCamera: _this, vrDisplay: _this._vrDevice, frameData: _this._frameData, specs: _this._specsVersion });\r\n            if (_this._attached) {\r\n                _this.getEngine().enableVR(_this.webVROptions);\r\n            }\r\n        });\r\n        if (typeof (VRFrameData) !== \"undefined\") {\r\n            _this._frameData = new VRFrameData();\r\n        }\r\n        if (webVROptions.useMultiview) {\r\n            if (!_this.getScene().getEngine().getCaps().multiview) {\r\n                Logger.Warn(\"Multiview is not supported, falling back to standard rendering\");\r\n                _this._useMultiviewToSingleView = false;\r\n            }\r\n            else {\r\n                _this._useMultiviewToSingleView = true;\r\n                _this._rigPostProcess = new VRMultiviewToSingleviewPostProcess(\"VRMultiviewToSingleview\", _this, 1.0);\r\n            }\r\n        }\r\n        /**\r\n         * The idea behind the following lines:\r\n         * objects that have the camera as parent should actually have the rig cameras as a parent.\r\n         * BUT, each of those cameras has a different view matrix, which means that if we set the parent to the first rig camera,\r\n         * the second will not show it correctly.\r\n         *\r\n         * To solve this - each object that has the camera as parent will be added to a protected array.\r\n         * When the rig camera renders, it will take this array and set all of those to be its children.\r\n         * This way, the right camera will be used as a parent, and the mesh will be rendered correctly.\r\n         * Amazing!\r\n         */\r\n        scene.onBeforeCameraRenderObservable.add(function (camera) {\r\n            if (camera.parent === _this && _this.rigParenting) {\r\n                _this._descendants = _this.getDescendants(true, function (n) {\r\n                    // don't take the cameras or the controllers!\r\n                    var isController = _this.controllers.some(function (controller) { return controller._mesh === n; });\r\n                    var isRigCamera = _this._rigCameras.indexOf(n) !== -1;\r\n                    return !isController && !isRigCamera;\r\n                });\r\n                _this._descendants.forEach(function (node) {\r\n                    node.parent = camera;\r\n                });\r\n            }\r\n        });\r\n        scene.onAfterCameraRenderObservable.add(function (camera) {\r\n            if (camera.parent === _this && _this.rigParenting) {\r\n                _this._descendants.forEach(function (node) {\r\n                    node.parent = _this;\r\n                });\r\n            }\r\n        });\r\n        return _this;\r\n    }\r\n    /**\r\n     * Gets the device distance from the ground in meters.\r\n     * @returns the distance in meters from the vrDevice to ground in device space. If standing matrix is not supported for the vrDevice 0 is returned.\r\n     */\r\n    WebVRFreeCamera.prototype.deviceDistanceToRoomGround = function () {\r\n        if (this._standingMatrix) {\r\n            // Add standing matrix offset to get real offset from ground in room\r\n            this._standingMatrix.getTranslationToRef(this._workingVector);\r\n            return this._deviceRoomPosition.y + this._workingVector.y;\r\n        }\r\n        //If VRDisplay does not inform stage parameters and no default height is set we fallback to zero.\r\n        return this._defaultHeight || 0;\r\n    };\r\n    /**\r\n     * Enables the standing matrix when supported. This can be used to position the user's view the correct height from the ground.\r\n     * @param callback will be called when the standing matrix is set. Callback parameter is if the standing matrix is supported.\r\n     */\r\n    WebVRFreeCamera.prototype.useStandingMatrix = function (callback) {\r\n        var _this = this;\r\n        if (callback === void 0) { callback = function (bool) { }; }\r\n        // Use standing matrix if available\r\n        this.getEngine().initWebVRAsync().then(function (result) {\r\n            if (!result.vrDisplay || !result.vrDisplay.stageParameters || !result.vrDisplay.stageParameters.sittingToStandingTransform || !_this.webVROptions.trackPosition) {\r\n                callback(false);\r\n            }\r\n            else {\r\n                _this._standingMatrix = new Matrix();\r\n                Matrix.FromFloat32ArrayToRefScaled(result.vrDisplay.stageParameters.sittingToStandingTransform, 0, 1, _this._standingMatrix);\r\n                if (!_this.getScene().useRightHandedSystem) {\r\n                    if (_this._standingMatrix) {\r\n                        _this._standingMatrix.toggleModelMatrixHandInPlace();\r\n                    }\r\n                }\r\n                callback(true);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Enables the standing matrix when supported. This can be used to position the user's view the correct height from the ground.\r\n     * @returns A promise with a boolean set to if the standing matrix is supported.\r\n     */\r\n    WebVRFreeCamera.prototype.useStandingMatrixAsync = function () {\r\n        var _this = this;\r\n        return new Promise(function (res) {\r\n            _this.useStandingMatrix(function (supported) {\r\n                res(supported);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Disposes the camera\r\n     */\r\n    WebVRFreeCamera.prototype.dispose = function () {\r\n        this._detachIfAttached();\r\n        this.getEngine().onVRRequestPresentComplete.removeCallback(this._onVREnabled);\r\n        if (this._updateCacheWhenTrackingDisabledObserver) {\r\n            this._scene.onBeforeRenderObservable.remove(this._updateCacheWhenTrackingDisabledObserver);\r\n        }\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    /**\r\n     * Gets a vrController by name.\r\n     * @param name The name of the controller to retreive\r\n     * @returns the controller matching the name specified or null if not found\r\n     */\r\n    WebVRFreeCamera.prototype.getControllerByName = function (name) {\r\n        for (var _i = 0, _a = this.controllers; _i < _a.length; _i++) {\r\n            var gp = _a[_i];\r\n            if (gp.hand === name) {\r\n                return gp;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    Object.defineProperty(WebVRFreeCamera.prototype, \"leftController\", {\r\n        /**\r\n         * The controller corresponding to the users left hand.\r\n         */\r\n        get: function () {\r\n            if (!this._leftController) {\r\n                this._leftController = this.getControllerByName(\"left\");\r\n            }\r\n            return this._leftController;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WebVRFreeCamera.prototype, \"rightController\", {\r\n        /**\r\n         * The controller corresponding to the users right hand.\r\n         */\r\n        get: function () {\r\n            if (!this._rightController) {\r\n                this._rightController = this.getControllerByName(\"right\");\r\n            }\r\n            return this._rightController;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Casts a ray forward from the vrCamera's gaze.\r\n     * @param length Length of the ray (default: 100)\r\n     * @returns the ray corresponding to the gaze\r\n     */\r\n    WebVRFreeCamera.prototype.getForwardRay = function (length) {\r\n        if (length === void 0) { length = 100; }\r\n        if (this.leftCamera) {\r\n            // Use left eye to avoid computation to compute center on every call\r\n            return _super.prototype.getForwardRay.call(this, length, this.leftCamera.getWorldMatrix(), this.leftCamera.globalPosition); // Need the actual rendered camera\r\n        }\r\n        else {\r\n            return _super.prototype.getForwardRay.call(this, length);\r\n        }\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Updates the camera based on device's frame data\r\n     */\r\n    WebVRFreeCamera.prototype._checkInputs = function () {\r\n        if (this._vrDevice && this._vrDevice.isPresenting) {\r\n            this._vrDevice.getFrameData(this._frameData);\r\n            this.updateFromDevice(this._frameData.pose);\r\n        }\r\n        _super.prototype._checkInputs.call(this);\r\n    };\r\n    /**\r\n     * Updates the poseControlled values based on the input device pose.\r\n     * @param poseData Pose coming from the device\r\n     */\r\n    WebVRFreeCamera.prototype.updateFromDevice = function (poseData) {\r\n        if (poseData && poseData.orientation && poseData.orientation.length === 4) {\r\n            this.rawPose = poseData;\r\n            this._deviceRoomRotationQuaternion.copyFromFloats(poseData.orientation[0], poseData.orientation[1], -poseData.orientation[2], -poseData.orientation[3]);\r\n            if (this.getScene().useRightHandedSystem) {\r\n                this._deviceRoomRotationQuaternion.z *= -1;\r\n                this._deviceRoomRotationQuaternion.w *= -1;\r\n            }\r\n            if (this.webVROptions.trackPosition && this.rawPose.position) {\r\n                this._deviceRoomPosition.copyFromFloats(this.rawPose.position[0], this.rawPose.position[1], -this.rawPose.position[2]);\r\n                if (this.getScene().useRightHandedSystem) {\r\n                    this._deviceRoomPosition.z *= -1;\r\n                }\r\n            }\r\n            this._poseSet = true;\r\n        }\r\n    };\r\n    /**\r\n     * WebVR's attach control will start broadcasting frames to the device.\r\n     * Note that in certain browsers (chrome for example) this function must be called\r\n     * within a user-interaction callback. Example:\r\n     * <pre> scene.onPointerDown = function() { camera.attachControl(canvas); }</pre>\r\n     *\r\n     * @param noPreventDefault prevent the default html element operation when attaching the vrDevice\r\n     */\r\n    WebVRFreeCamera.prototype.attachControl = function (noPreventDefault) {\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n        _super.prototype.attachControl.call(this, noPreventDefault);\r\n        this._attached = true;\r\n        noPreventDefault = Camera.ForceAttachControlToAlwaysPreventDefault ? false : noPreventDefault;\r\n        if (this._vrDevice) {\r\n            this.getEngine().enableVR(this.webVROptions);\r\n        }\r\n        var hostWindow = this._scene.getEngine().getHostWindow();\r\n        if (hostWindow) {\r\n            hostWindow.addEventListener('vrdisplaypresentchange', this._detachIfAttached);\r\n        }\r\n    };\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n     */\r\n    WebVRFreeCamera.prototype.detachControl = function (ignored) {\r\n        this.getScene().gamepadManager.onGamepadConnectedObservable.remove(this._onGamepadConnectedObserver);\r\n        this.getScene().gamepadManager.onGamepadDisconnectedObservable.remove(this._onGamepadDisconnectedObserver);\r\n        _super.prototype.detachControl.call(this);\r\n        this._attached = false;\r\n        this.getEngine().disableVR();\r\n        window.removeEventListener('vrdisplaypresentchange', this._detachIfAttached);\r\n    };\r\n    /**\r\n     * @returns the name of this class\r\n     */\r\n    WebVRFreeCamera.prototype.getClassName = function () {\r\n        return \"WebVRFreeCamera\";\r\n    };\r\n    /**\r\n     * Calls resetPose on the vrDisplay\r\n     * See: https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/resetPose\r\n     */\r\n    WebVRFreeCamera.prototype.resetToCurrentRotation = function () {\r\n        //uses the vrDisplay's \"resetPose()\".\r\n        //pitch and roll won't be affected.\r\n        this._vrDevice.resetPose();\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Updates the rig cameras (left and right eye)\r\n     */\r\n    WebVRFreeCamera.prototype._updateRigCameras = function () {\r\n        var camLeft = this._rigCameras[0];\r\n        var camRight = this._rigCameras[1];\r\n        camLeft.rotationQuaternion.copyFrom(this._deviceRoomRotationQuaternion);\r\n        camRight.rotationQuaternion.copyFrom(this._deviceRoomRotationQuaternion);\r\n        camLeft.position.copyFrom(this._deviceRoomPosition);\r\n        camRight.position.copyFrom(this._deviceRoomPosition);\r\n    };\r\n    // Remove translation from 6dof headset if trackposition is set to false\r\n    WebVRFreeCamera.prototype._correctPositionIfNotTrackPosition = function (matrix, isViewMatrix) {\r\n        if (isViewMatrix === void 0) { isViewMatrix = false; }\r\n        if (this.rawPose && this.rawPose.position && !this.webVROptions.trackPosition) {\r\n            Matrix.TranslationToRef(this.rawPose.position[0], this.rawPose.position[1], -this.rawPose.position[2], this._tmpMatrix);\r\n            if (!isViewMatrix) {\r\n                this._tmpMatrix.invert();\r\n            }\r\n            this._tmpMatrix.multiplyToRef(matrix, matrix);\r\n        }\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Updates the cached values of the camera\r\n     * @param ignoreParentClass ignores updating the parent class's cache (default: false)\r\n     */\r\n    WebVRFreeCamera.prototype._updateCache = function (ignoreParentClass) {\r\n        var _this = this;\r\n        if (!this.rotationQuaternion.equals(this._cache.rotationQuaternion) || !this.position.equals(this._cache.position)) {\r\n            // Update to ensure devicePosition is up to date with most recent _deviceRoomPosition\r\n            if (!this.updateCacheCalled) {\r\n                // make sure it is only called once per loop. this.update() might cause an infinite loop.\r\n                this.updateCacheCalled = true;\r\n                this.update();\r\n            }\r\n            // Set working vector to the device position in room space rotated by the new rotation\r\n            this.rotationQuaternion.toRotationMatrix(this._workingMatrix);\r\n            Vector3.TransformCoordinatesToRef(this._deviceRoomPosition, this._workingMatrix, this._workingVector);\r\n            // Subtract this vector from the current device position in world to get the translation for the device world matrix\r\n            this.devicePosition.subtractToRef(this._workingVector, this._workingVector);\r\n            Matrix.ComposeToRef(this._oneVector, this.rotationQuaternion, this._workingVector, this._deviceToWorld);\r\n            // Add translation from anchor position\r\n            this._deviceToWorld.getTranslationToRef(this._workingVector);\r\n            this._workingVector.addInPlace(this.position);\r\n            this._workingVector.subtractInPlace(this._cache.position);\r\n            this._deviceToWorld.setTranslation(this._workingVector);\r\n            // Set an inverted matrix to be used when updating the camera\r\n            this._deviceToWorld.invertToRef(this._worldToDevice);\r\n            // Update the gamepad to ensure the mesh is updated on the same frame as camera\r\n            this.controllers.forEach(function (controller) {\r\n                controller._deviceToWorld.copyFrom(_this._deviceToWorld);\r\n                _this._correctPositionIfNotTrackPosition(controller._deviceToWorld);\r\n                controller.update();\r\n            });\r\n        }\r\n        if (!ignoreParentClass) {\r\n            _super.prototype._updateCache.call(this);\r\n        }\r\n        this.updateCacheCalled = false;\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Get current device position in babylon world\r\n     */\r\n    WebVRFreeCamera.prototype._computeDevicePosition = function () {\r\n        Vector3.TransformCoordinatesToRef(this._deviceRoomPosition, this._deviceToWorld, this.devicePosition);\r\n    };\r\n    /**\r\n     * Updates the current device position and rotation in the babylon world\r\n     */\r\n    WebVRFreeCamera.prototype.update = function () {\r\n        this._computeDevicePosition();\r\n        // Get current device rotation in babylon world\r\n        Matrix.FromQuaternionToRef(this._deviceRoomRotationQuaternion, this._workingMatrix);\r\n        this._workingMatrix.multiplyToRef(this._deviceToWorld, this._workingMatrix);\r\n        Quaternion.FromRotationMatrixToRef(this._workingMatrix, this.deviceRotationQuaternion);\r\n        if (this._poseSet) {\r\n            this.onPoseUpdatedFromDeviceObservable.notifyObservers(null);\r\n        }\r\n        _super.prototype.update.call(this);\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Gets the view matrix of this camera (Always set to identity as left and right eye cameras contain the actual view matrix)\r\n     * @returns an identity matrix\r\n     */\r\n    WebVRFreeCamera.prototype._getViewMatrix = function () {\r\n        return Matrix.Identity();\r\n    };\r\n    /**\r\n     * This function is called by the two RIG cameras.\r\n     * 'this' is the left or right camera (and NOT (!!!) the WebVRFreeCamera instance)\r\n     * @hidden\r\n     */\r\n    WebVRFreeCamera.prototype._getWebVRViewMatrix = function () {\r\n        // Update the parent camera prior to using a child camera to avoid desynchronization\r\n        var parentCamera = this._cameraRigParams[\"parentCamera\"];\r\n        parentCamera._updateCache();\r\n        //WebVR 1.1\r\n        var viewArray = this._cameraRigParams[\"left\"] ? this._cameraRigParams[\"frameData\"].leftViewMatrix : this._cameraRigParams[\"frameData\"].rightViewMatrix;\r\n        Matrix.FromArrayToRef(viewArray, 0, this._webvrViewMatrix);\r\n        if (!this.getScene().useRightHandedSystem) {\r\n            this._webvrViewMatrix.toggleModelMatrixHandInPlace();\r\n        }\r\n        // update the camera rotation matrix\r\n        this._webvrViewMatrix.getRotationMatrixToRef(this._cameraRotationMatrix);\r\n        Vector3.TransformCoordinatesToRef(this._referencePoint, this._cameraRotationMatrix, this._transformedReferencePoint);\r\n        // Computing target and final matrix\r\n        this.position.addToRef(this._transformedReferencePoint, this._currentTarget);\r\n        // should the view matrix be updated with scale and position offset?\r\n        if (parentCamera.deviceScaleFactor !== 1) {\r\n            this._webvrViewMatrix.invert();\r\n            // scale the position, if set\r\n            if (parentCamera.deviceScaleFactor) {\r\n                this._webvrViewMatrix.multiplyAtIndex(12, parentCamera.deviceScaleFactor);\r\n                this._webvrViewMatrix.multiplyAtIndex(13, parentCamera.deviceScaleFactor);\r\n                this._webvrViewMatrix.multiplyAtIndex(14, parentCamera.deviceScaleFactor);\r\n            }\r\n            this._webvrViewMatrix.invert();\r\n        }\r\n        // Remove translation from 6dof headset if trackposition is set to false\r\n        parentCamera._correctPositionIfNotTrackPosition(this._webvrViewMatrix, true);\r\n        parentCamera._worldToDevice.multiplyToRef(this._webvrViewMatrix, this._webvrViewMatrix);\r\n        // Compute global position\r\n        this._workingMatrix = this._workingMatrix || Matrix.Identity();\r\n        this._webvrViewMatrix.invertToRef(this._workingMatrix);\r\n        this._workingMatrix.multiplyToRef(parentCamera.getWorldMatrix(), this._workingMatrix);\r\n        this._workingMatrix.getTranslationToRef(this._globalPosition);\r\n        this._markSyncedWithParent();\r\n        return this._webvrViewMatrix;\r\n    };\r\n    /** @hidden */\r\n    WebVRFreeCamera.prototype._getWebVRProjectionMatrix = function () {\r\n        var parentCamera = this.parent;\r\n        parentCamera._vrDevice.depthNear = parentCamera.minZ;\r\n        parentCamera._vrDevice.depthFar = parentCamera.maxZ;\r\n        var projectionArray = this._cameraRigParams[\"left\"] ? this._cameraRigParams[\"frameData\"].leftProjectionMatrix : this._cameraRigParams[\"frameData\"].rightProjectionMatrix;\r\n        Matrix.FromArrayToRef(projectionArray, 0, this._projectionMatrix);\r\n        //babylon compatible matrix\r\n        if (!this.getScene().useRightHandedSystem) {\r\n            this._projectionMatrix.toggleProjectionMatrixHandInPlace();\r\n        }\r\n        return this._projectionMatrix;\r\n    };\r\n    /**\r\n     * Initializes the controllers and their meshes\r\n     */\r\n    WebVRFreeCamera.prototype.initControllers = function () {\r\n        var _this = this;\r\n        this.controllers = [];\r\n        var manager = this.getScene().gamepadManager;\r\n        this._onGamepadDisconnectedObserver = manager.onGamepadDisconnectedObservable.add(function (gamepad) {\r\n            if (gamepad.type === Gamepad.POSE_ENABLED) {\r\n                var webVrController = gamepad;\r\n                if (webVrController.defaultModel) {\r\n                    webVrController.defaultModel.setEnabled(false);\r\n                }\r\n                if (webVrController.hand === \"right\") {\r\n                    _this._rightController = null;\r\n                }\r\n                if (webVrController.hand === \"left\") {\r\n                    _this._leftController = null;\r\n                }\r\n                var controllerIndex = _this.controllers.indexOf(webVrController);\r\n                if (controllerIndex !== -1) {\r\n                    _this.controllers.splice(controllerIndex, 1);\r\n                }\r\n            }\r\n        });\r\n        this._onGamepadConnectedObserver = manager.onGamepadConnectedObservable.add(function (gamepad) {\r\n            if (gamepad.type === Gamepad.POSE_ENABLED) {\r\n                var webVrController_1 = gamepad;\r\n                if (!_this.webVROptions.trackPosition) {\r\n                    webVrController_1._disableTrackPosition(new Vector3(webVrController_1.hand == \"left\" ? -0.15 : 0.15, -0.5, 0.25));\r\n                    // Cache must be updated before rendering controllers to avoid them being one frame behind\r\n                    if (!_this._updateCacheWhenTrackingDisabledObserver) {\r\n                        _this._updateCacheWhenTrackingDisabledObserver = _this._scene.onBeforeRenderObservable.add(function () {\r\n                            _this._updateCache();\r\n                        });\r\n                    }\r\n                }\r\n                webVrController_1.deviceScaleFactor = _this.deviceScaleFactor;\r\n                webVrController_1._deviceToWorld.copyFrom(_this._deviceToWorld);\r\n                _this._correctPositionIfNotTrackPosition(webVrController_1._deviceToWorld);\r\n                if (_this.webVROptions.controllerMeshes) {\r\n                    if (webVrController_1.defaultModel) {\r\n                        webVrController_1.defaultModel.setEnabled(true);\r\n                    }\r\n                    else {\r\n                        // Load the meshes\r\n                        webVrController_1.initControllerMesh(_this.getScene(), function (loadedMesh) {\r\n                            loadedMesh.scaling.scaleInPlace(_this.deviceScaleFactor);\r\n                            _this.onControllerMeshLoadedObservable.notifyObservers(webVrController_1);\r\n                            if (_this.webVROptions.defaultLightingOnControllers) {\r\n                                if (!_this._lightOnControllers) {\r\n                                    _this._lightOnControllers = new HemisphericLight(\"vrControllersLight\", new Vector3(0, 1, 0), _this.getScene());\r\n                                }\r\n                                var activateLightOnSubMeshes_1 = function (mesh, light) {\r\n                                    var children = mesh.getChildren();\r\n                                    if (children && children.length !== 0) {\r\n                                        children.forEach(function (mesh) {\r\n                                            light.includedOnlyMeshes.push(mesh);\r\n                                            activateLightOnSubMeshes_1(mesh, light);\r\n                                        });\r\n                                    }\r\n                                };\r\n                                _this._lightOnControllers.includedOnlyMeshes.push(loadedMesh);\r\n                                activateLightOnSubMeshes_1(loadedMesh, _this._lightOnControllers);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n                webVrController_1.attachToPoseControlledCamera(_this);\r\n                // since this is async - sanity check. Is the controller already stored?\r\n                if (_this.controllers.indexOf(webVrController_1) === -1) {\r\n                    //add to the controllers array\r\n                    _this.controllers.push(webVrController_1);\r\n                    // Forced to add some control code for Vive as it doesn't always fill properly the \"hand\" property\r\n                    // Sometimes, both controllers are set correctly (left and right), sometimes none, sometimes only one of them...\r\n                    // So we're overriding setting left & right manually to be sure\r\n                    var firstViveWandDetected = false;\r\n                    for (var i = 0; i < _this.controllers.length; i++) {\r\n                        if (_this.controllers[i].controllerType === PoseEnabledControllerType.VIVE) {\r\n                            if (!firstViveWandDetected) {\r\n                                firstViveWandDetected = true;\r\n                                _this.controllers[i].hand = \"left\";\r\n                            }\r\n                            else {\r\n                                _this.controllers[i].hand = \"right\";\r\n                            }\r\n                        }\r\n                    }\r\n                    //did we find enough controllers? Great! let the developer know.\r\n                    if (_this.controllers.length >= 2) {\r\n                        _this.onControllersAttachedObservable.notifyObservers(_this.controllers);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n    return WebVRFreeCamera;\r\n}(FreeCamera));\r\nexport { WebVRFreeCamera };\r\n"]},"metadata":{},"sourceType":"module"}