{"ast":null,"code":"import { Vector3 } from \"../Maths/math.vector\";\nimport { VertexBuffer } from \"../Meshes/buffer\";\nimport { SubMesh } from \"../Meshes/subMesh\";\nimport { Mesh } from \"../Meshes/mesh\";\nimport { AsyncLoop } from \"../Misc/tools\";\nimport { Epsilon } from '../Maths/math.constants';\n/**\r\n * Class used to specify simplification options\r\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n */\n\nvar SimplificationSettings =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a SimplificationSettings\r\n   * @param quality expected quality\r\n   * @param distance distance when this optimized version should be used\r\n   * @param optimizeMesh already optimized mesh\r\n   */\n  function SimplificationSettings(\n  /** expected quality */\n  quality,\n  /** distance when this optimized version should be used */\n  distance,\n  /** already optimized mesh  */\n  optimizeMesh) {\n    this.quality = quality;\n    this.distance = distance;\n    this.optimizeMesh = optimizeMesh;\n  }\n\n  return SimplificationSettings;\n}();\n\nexport { SimplificationSettings };\n/**\r\n * Queue used to order the simplification tasks\r\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n */\n\nvar SimplificationQueue =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new queue\r\n   */\n  function SimplificationQueue() {\n    this.running = false;\n    this._simplificationArray = [];\n  }\n  /**\r\n   * Adds a new simplification task\r\n   * @param task defines a task to add\r\n   */\n\n\n  SimplificationQueue.prototype.addTask = function (task) {\n    this._simplificationArray.push(task);\n  };\n  /**\r\n   * Execute next task\r\n   */\n\n\n  SimplificationQueue.prototype.executeNext = function () {\n    var task = this._simplificationArray.pop();\n\n    if (task) {\n      this.running = true;\n      this.runSimplification(task);\n    } else {\n      this.running = false;\n    }\n  };\n  /**\r\n   * Execute a simplification task\r\n   * @param task defines the task to run\r\n   */\n\n\n  SimplificationQueue.prototype.runSimplification = function (task) {\n    var _this = this;\n\n    if (task.parallelProcessing) {\n      //parallel simplifier\n      task.settings.forEach(function (setting) {\n        var simplifier = _this.getSimplifier(task);\n\n        simplifier.simplify(setting, function (newMesh) {\n          if (setting.distance !== undefined) {\n            task.mesh.addLODLevel(setting.distance, newMesh);\n          }\n\n          newMesh.isVisible = true; //check if it is the last\n\n          if (setting.quality === task.settings[task.settings.length - 1].quality && task.successCallback) {\n            //all done, run the success callback.\n            task.successCallback();\n          }\n\n          _this.executeNext();\n        });\n      });\n    } else {\n      //single simplifier.\n      var simplifier = this.getSimplifier(task);\n\n      var runDecimation = function (setting, callback) {\n        simplifier.simplify(setting, function (newMesh) {\n          if (setting.distance !== undefined) {\n            task.mesh.addLODLevel(setting.distance, newMesh);\n          }\n\n          newMesh.isVisible = true; //run the next quality level\n\n          callback();\n        });\n      };\n\n      AsyncLoop.Run(task.settings.length, function (loop) {\n        runDecimation(task.settings[loop.index], function () {\n          loop.executeNext();\n        });\n      }, function () {\n        //execution ended, run the success callback.\n        if (task.successCallback) {\n          task.successCallback();\n        }\n\n        _this.executeNext();\n      });\n    }\n  };\n\n  SimplificationQueue.prototype.getSimplifier = function (task) {\n    switch (task.simplificationType) {\n      case SimplificationType.QUADRATIC:\n      default:\n        return new QuadraticErrorSimplification(task.mesh);\n    }\n  };\n\n  return SimplificationQueue;\n}();\n\nexport { SimplificationQueue };\n/**\r\n * The implemented types of simplification\r\n * At the moment only Quadratic Error Decimation is implemented\r\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n */\n\nexport var SimplificationType;\n\n(function (SimplificationType) {\n  /** Quadratic error decimation */\n  SimplificationType[SimplificationType[\"QUADRATIC\"] = 0] = \"QUADRATIC\";\n})(SimplificationType || (SimplificationType = {}));\n\nvar DecimationTriangle =\n/** @class */\nfunction () {\n  function DecimationTriangle(vertices) {\n    this.vertices = vertices;\n    this.error = new Array(4);\n    this.deleted = false;\n    this.isDirty = false;\n    this.deletePending = false;\n    this.borderFactor = 0;\n  }\n\n  return DecimationTriangle;\n}();\n\nvar DecimationVertex =\n/** @class */\nfunction () {\n  function DecimationVertex(position, id) {\n    this.position = position;\n    this.id = id;\n    this.isBorder = true;\n    this.q = new QuadraticMatrix();\n    this.triangleCount = 0;\n    this.triangleStart = 0;\n    this.originalOffsets = [];\n  }\n\n  DecimationVertex.prototype.updatePosition = function (newPosition) {\n    this.position.copyFrom(newPosition);\n  };\n\n  return DecimationVertex;\n}();\n\nvar QuadraticMatrix =\n/** @class */\nfunction () {\n  function QuadraticMatrix(data) {\n    this.data = new Array(10);\n\n    for (var i = 0; i < 10; ++i) {\n      if (data && data[i]) {\n        this.data[i] = data[i];\n      } else {\n        this.data[i] = 0;\n      }\n    }\n  }\n\n  QuadraticMatrix.prototype.det = function (a11, a12, a13, a21, a22, a23, a31, a32, a33) {\n    var det = this.data[a11] * this.data[a22] * this.data[a33] + this.data[a13] * this.data[a21] * this.data[a32] + this.data[a12] * this.data[a23] * this.data[a31] - this.data[a13] * this.data[a22] * this.data[a31] - this.data[a11] * this.data[a23] * this.data[a32] - this.data[a12] * this.data[a21] * this.data[a33];\n    return det;\n  };\n\n  QuadraticMatrix.prototype.addInPlace = function (matrix) {\n    for (var i = 0; i < 10; ++i) {\n      this.data[i] += matrix.data[i];\n    }\n  };\n\n  QuadraticMatrix.prototype.addArrayInPlace = function (data) {\n    for (var i = 0; i < 10; ++i) {\n      this.data[i] += data[i];\n    }\n  };\n\n  QuadraticMatrix.prototype.add = function (matrix) {\n    var m = new QuadraticMatrix();\n\n    for (var i = 0; i < 10; ++i) {\n      m.data[i] = this.data[i] + matrix.data[i];\n    }\n\n    return m;\n  };\n\n  QuadraticMatrix.FromData = function (a, b, c, d) {\n    return new QuadraticMatrix(QuadraticMatrix.DataFromNumbers(a, b, c, d));\n  }; //returning an array to avoid garbage collection\n\n\n  QuadraticMatrix.DataFromNumbers = function (a, b, c, d) {\n    return [a * a, a * b, a * c, a * d, b * b, b * c, b * d, c * c, c * d, d * d];\n  };\n\n  return QuadraticMatrix;\n}();\n\nvar Reference =\n/** @class */\nfunction () {\n  function Reference(vertexId, triangleId) {\n    this.vertexId = vertexId;\n    this.triangleId = triangleId;\n  }\n\n  return Reference;\n}();\n/**\r\n * An implementation of the Quadratic Error simplification algorithm.\r\n * Original paper : http://www1.cs.columbia.edu/~cs4162/html05s/garland97.pdf\r\n * Ported mostly from QSlim and http://voxels.blogspot.de/2014/05/quadric-mesh-simplification-with-source.html to babylon JS\r\n * @author RaananW\r\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n */\n\n\nvar QuadraticErrorSimplification =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new QuadraticErrorSimplification\r\n   * @param _mesh defines the target mesh\r\n   */\n  function QuadraticErrorSimplification(_mesh) {\n    this._mesh = _mesh;\n    /** Gets or sets the number pf sync interations */\n\n    this.syncIterations = 5000;\n    this.aggressiveness = 7;\n    this.decimationIterations = 100;\n    this.boundingBoxEpsilon = Epsilon;\n  }\n  /**\r\n   * Simplification of a given mesh according to the given settings.\r\n   * Since this requires computation, it is assumed that the function runs async.\r\n   * @param settings The settings of the simplification, including quality and distance\r\n   * @param successCallback A callback that will be called after the mesh was simplified.\r\n   */\n\n\n  QuadraticErrorSimplification.prototype.simplify = function (settings, successCallback) {\n    var _this = this;\n\n    this.initDecimatedMesh(); //iterating through the submeshes array, one after the other.\n\n    AsyncLoop.Run(this._mesh.subMeshes.length, function (loop) {\n      _this.initWithMesh(loop.index, function () {\n        _this.runDecimation(settings, loop.index, function () {\n          loop.executeNext();\n        });\n      }, settings.optimizeMesh);\n    }, function () {\n      setTimeout(function () {\n        successCallback(_this._reconstructedMesh);\n      }, 0);\n    });\n  };\n\n  QuadraticErrorSimplification.prototype.runDecimation = function (settings, submeshIndex, successCallback) {\n    var _this = this;\n\n    var targetCount = ~~(this.triangles.length * settings.quality);\n    var deletedTriangles = 0;\n    var triangleCount = this.triangles.length;\n\n    var iterationFunction = function (iteration, callback) {\n      setTimeout(function () {\n        if (iteration % 5 === 0) {\n          _this.updateMesh(iteration === 0);\n        }\n\n        for (var i = 0; i < _this.triangles.length; ++i) {\n          _this.triangles[i].isDirty = false;\n        }\n\n        var threshold = 0.000000001 * Math.pow(iteration + 3, _this.aggressiveness);\n\n        var trianglesIterator = function (i) {\n          var tIdx = ~~((_this.triangles.length / 2 + i) % _this.triangles.length);\n          var t = _this.triangles[tIdx];\n\n          if (!t) {\n            return;\n          }\n\n          if (t.error[3] > threshold || t.deleted || t.isDirty) {\n            return;\n          }\n\n          for (var j = 0; j < 3; ++j) {\n            if (t.error[j] < threshold) {\n              var deleted0 = [];\n              var deleted1 = [];\n              var v0 = t.vertices[j];\n              var v1 = t.vertices[(j + 1) % 3];\n\n              if (v0.isBorder || v1.isBorder) {\n                continue;\n              }\n\n              var p = Vector3.Zero(); // var n = Vector3.Zero();\n              // var uv = Vector2.Zero();\n              // var color = new Color4(0, 0, 0, 1);\n\n              _this.calculateError(v0, v1, p);\n\n              var delTr = new Array();\n\n              if (_this.isFlipped(v0, v1, p, deleted0, delTr)) {\n                continue;\n              }\n\n              if (_this.isFlipped(v1, v0, p, deleted1, delTr)) {\n                continue;\n              }\n\n              if (deleted0.indexOf(true) < 0 || deleted1.indexOf(true) < 0) {\n                continue;\n              }\n\n              var uniqueArray = new Array();\n              delTr.forEach(function (deletedT) {\n                if (uniqueArray.indexOf(deletedT) === -1) {\n                  deletedT.deletePending = true;\n                  uniqueArray.push(deletedT);\n                }\n              });\n\n              if (uniqueArray.length % 2 !== 0) {\n                continue;\n              }\n\n              v0.q = v1.q.add(v0.q);\n              v0.updatePosition(p);\n              var tStart = _this.references.length;\n              deletedTriangles = _this.updateTriangles(v0, v0, deleted0, deletedTriangles);\n              deletedTriangles = _this.updateTriangles(v0, v1, deleted1, deletedTriangles);\n              var tCount = _this.references.length - tStart;\n\n              if (tCount <= v0.triangleCount) {\n                if (tCount) {\n                  for (var c = 0; c < tCount; c++) {\n                    _this.references[v0.triangleStart + c] = _this.references[tStart + c];\n                  }\n                }\n              } else {\n                v0.triangleStart = tStart;\n              }\n\n              v0.triangleCount = tCount;\n              break;\n            }\n          }\n        };\n\n        AsyncLoop.SyncAsyncForLoop(_this.triangles.length, _this.syncIterations, trianglesIterator, callback, function () {\n          return triangleCount - deletedTriangles <= targetCount;\n        });\n      }, 0);\n    };\n\n    AsyncLoop.Run(this.decimationIterations, function (loop) {\n      if (triangleCount - deletedTriangles <= targetCount) {\n        loop.breakLoop();\n      } else {\n        iterationFunction(loop.index, function () {\n          loop.executeNext();\n        });\n      }\n    }, function () {\n      setTimeout(function () {\n        //reconstruct this part of the mesh\n        _this.reconstructMesh(submeshIndex);\n\n        successCallback();\n      }, 0);\n    });\n  };\n\n  QuadraticErrorSimplification.prototype.initWithMesh = function (submeshIndex, callback, optimizeMesh) {\n    var _this = this;\n\n    this.vertices = [];\n    this.triangles = [];\n\n    var positionData = this._mesh.getVerticesData(VertexBuffer.PositionKind);\n\n    var indices = this._mesh.getIndices();\n\n    var submesh = this._mesh.subMeshes[submeshIndex];\n\n    var findInVertices = function (positionToSearch) {\n      if (optimizeMesh) {\n        for (var ii = 0; ii < _this.vertices.length; ++ii) {\n          if (_this.vertices[ii].position.equalsWithEpsilon(positionToSearch, 0.0001)) {\n            return _this.vertices[ii];\n          }\n        }\n      }\n\n      return null;\n    };\n\n    var vertexReferences = [];\n\n    var vertexInit = function (i) {\n      if (!positionData) {\n        return;\n      }\n\n      var offset = i + submesh.verticesStart;\n      var position = Vector3.FromArray(positionData, offset * 3);\n      var vertex = findInVertices(position) || new DecimationVertex(position, _this.vertices.length);\n      vertex.originalOffsets.push(offset);\n\n      if (vertex.id === _this.vertices.length) {\n        _this.vertices.push(vertex);\n      }\n\n      vertexReferences.push(vertex.id);\n    }; //var totalVertices = mesh.getTotalVertices();\n\n\n    var totalVertices = submesh.verticesCount;\n    AsyncLoop.SyncAsyncForLoop(totalVertices, this.syncIterations / 4 >> 0, vertexInit, function () {\n      var indicesInit = function (i) {\n        if (!indices) {\n          return;\n        }\n\n        var offset = submesh.indexStart / 3 + i;\n        var pos = offset * 3;\n        var i0 = indices[pos + 0];\n        var i1 = indices[pos + 1];\n        var i2 = indices[pos + 2];\n        var v0 = _this.vertices[vertexReferences[i0 - submesh.verticesStart]];\n        var v1 = _this.vertices[vertexReferences[i1 - submesh.verticesStart]];\n        var v2 = _this.vertices[vertexReferences[i2 - submesh.verticesStart]];\n        var triangle = new DecimationTriangle([v0, v1, v2]);\n        triangle.originalOffset = pos;\n\n        _this.triangles.push(triangle);\n      };\n\n      AsyncLoop.SyncAsyncForLoop(submesh.indexCount / 3, _this.syncIterations, indicesInit, function () {\n        _this.init(callback);\n      });\n    });\n  };\n\n  QuadraticErrorSimplification.prototype.init = function (callback) {\n    var _this = this;\n\n    var triangleInit1 = function (i) {\n      var t = _this.triangles[i];\n      t.normal = Vector3.Cross(t.vertices[1].position.subtract(t.vertices[0].position), t.vertices[2].position.subtract(t.vertices[0].position)).normalize();\n\n      for (var j = 0; j < 3; j++) {\n        t.vertices[j].q.addArrayInPlace(QuadraticMatrix.DataFromNumbers(t.normal.x, t.normal.y, t.normal.z, -Vector3.Dot(t.normal, t.vertices[0].position)));\n      }\n    };\n\n    AsyncLoop.SyncAsyncForLoop(this.triangles.length, this.syncIterations, triangleInit1, function () {\n      var triangleInit2 = function (i) {\n        var t = _this.triangles[i];\n\n        for (var j = 0; j < 3; ++j) {\n          t.error[j] = _this.calculateError(t.vertices[j], t.vertices[(j + 1) % 3]);\n        }\n\n        t.error[3] = Math.min(t.error[0], t.error[1], t.error[2]);\n      };\n\n      AsyncLoop.SyncAsyncForLoop(_this.triangles.length, _this.syncIterations, triangleInit2, function () {\n        callback();\n      });\n    });\n  };\n\n  QuadraticErrorSimplification.prototype.reconstructMesh = function (submeshIndex) {\n    var newTriangles = [];\n    var i;\n\n    for (i = 0; i < this.vertices.length; ++i) {\n      this.vertices[i].triangleCount = 0;\n    }\n\n    var t;\n    var j;\n\n    for (i = 0; i < this.triangles.length; ++i) {\n      if (!this.triangles[i].deleted) {\n        t = this.triangles[i];\n\n        for (j = 0; j < 3; ++j) {\n          t.vertices[j].triangleCount = 1;\n        }\n\n        newTriangles.push(t);\n      }\n    }\n\n    var newPositionData = this._reconstructedMesh.getVerticesData(VertexBuffer.PositionKind) || [];\n    var newNormalData = this._reconstructedMesh.getVerticesData(VertexBuffer.NormalKind) || [];\n    var newUVsData = this._reconstructedMesh.getVerticesData(VertexBuffer.UVKind) || [];\n    var newColorsData = this._reconstructedMesh.getVerticesData(VertexBuffer.ColorKind) || [];\n\n    var normalData = this._mesh.getVerticesData(VertexBuffer.NormalKind);\n\n    var uvs = this._mesh.getVerticesData(VertexBuffer.UVKind);\n\n    var colorsData = this._mesh.getVerticesData(VertexBuffer.ColorKind);\n\n    var vertexCount = 0;\n\n    for (i = 0; i < this.vertices.length; ++i) {\n      var vertex = this.vertices[i];\n      vertex.id = vertexCount;\n\n      if (vertex.triangleCount) {\n        vertex.originalOffsets.forEach(function (originalOffset) {\n          newPositionData.push(vertex.position.x);\n          newPositionData.push(vertex.position.y);\n          newPositionData.push(vertex.position.z);\n\n          if (normalData && normalData.length) {\n            newNormalData.push(normalData[originalOffset * 3]);\n            newNormalData.push(normalData[originalOffset * 3 + 1]);\n            newNormalData.push(normalData[originalOffset * 3 + 2]);\n          }\n\n          if (uvs && uvs.length) {\n            newUVsData.push(uvs[originalOffset * 2]);\n            newUVsData.push(uvs[originalOffset * 2 + 1]);\n          }\n\n          if (colorsData && colorsData.length) {\n            newColorsData.push(colorsData[originalOffset * 4]);\n            newColorsData.push(colorsData[originalOffset * 4 + 1]);\n            newColorsData.push(colorsData[originalOffset * 4 + 2]);\n            newColorsData.push(colorsData[originalOffset * 4 + 3]);\n          }\n\n          ++vertexCount;\n        });\n      }\n    }\n\n    var startingIndex = this._reconstructedMesh.getTotalIndices();\n\n    var startingVertex = this._reconstructedMesh.getTotalVertices();\n\n    var submeshesArray = this._reconstructedMesh.subMeshes;\n    this._reconstructedMesh.subMeshes = [];\n\n    var newIndicesArray = this._reconstructedMesh.getIndices(); //[];\n\n\n    var originalIndices = this._mesh.getIndices();\n\n    for (i = 0; i < newTriangles.length; ++i) {\n      t = newTriangles[i]; //now get the new referencing point for each vertex\n\n      [0, 1, 2].forEach(function (idx) {\n        var id = originalIndices[t.originalOffset + idx];\n        var offset = t.vertices[idx].originalOffsets.indexOf(id);\n\n        if (offset < 0) {\n          offset = 0;\n        }\n\n        newIndicesArray.push(t.vertices[idx].id + offset + startingVertex);\n      });\n    } //overwriting the old vertex buffers and indices.\n\n\n    this._reconstructedMesh.setIndices(newIndicesArray);\n\n    this._reconstructedMesh.setVerticesData(VertexBuffer.PositionKind, newPositionData);\n\n    if (newNormalData.length > 0) {\n      this._reconstructedMesh.setVerticesData(VertexBuffer.NormalKind, newNormalData);\n    }\n\n    if (newUVsData.length > 0) {\n      this._reconstructedMesh.setVerticesData(VertexBuffer.UVKind, newUVsData);\n    }\n\n    if (newColorsData.length > 0) {\n      this._reconstructedMesh.setVerticesData(VertexBuffer.ColorKind, newColorsData);\n    } //create submesh\n\n\n    var originalSubmesh = this._mesh.subMeshes[submeshIndex];\n\n    if (submeshIndex > 0) {\n      this._reconstructedMesh.subMeshes = [];\n      submeshesArray.forEach(function (submesh) {\n        SubMesh.AddToMesh(submesh.materialIndex, submesh.verticesStart, submesh.verticesCount,\n        /* 0, newPositionData.length/3, */\n        submesh.indexStart, submesh.indexCount, submesh.getMesh());\n      });\n      SubMesh.AddToMesh(originalSubmesh.materialIndex, startingVertex, vertexCount,\n      /* 0, newPositionData.length / 3, */\n      startingIndex, newTriangles.length * 3, this._reconstructedMesh);\n    }\n  };\n\n  QuadraticErrorSimplification.prototype.initDecimatedMesh = function () {\n    this._reconstructedMesh = new Mesh(this._mesh.name + \"Decimated\", this._mesh.getScene());\n    this._reconstructedMesh.material = this._mesh.material;\n    this._reconstructedMesh.parent = this._mesh.parent;\n    this._reconstructedMesh.isVisible = false;\n    this._reconstructedMesh.renderingGroupId = this._mesh.renderingGroupId;\n  };\n\n  QuadraticErrorSimplification.prototype.isFlipped = function (vertex1, vertex2, point, deletedArray, delTr) {\n    for (var i = 0; i < vertex1.triangleCount; ++i) {\n      var t = this.triangles[this.references[vertex1.triangleStart + i].triangleId];\n\n      if (t.deleted) {\n        continue;\n      }\n\n      var s = this.references[vertex1.triangleStart + i].vertexId;\n      var v1 = t.vertices[(s + 1) % 3];\n      var v2 = t.vertices[(s + 2) % 3];\n\n      if (v1 === vertex2 || v2 === vertex2) {\n        deletedArray[i] = true;\n        delTr.push(t);\n        continue;\n      }\n\n      var d1 = v1.position.subtract(point);\n      d1 = d1.normalize();\n      var d2 = v2.position.subtract(point);\n      d2 = d2.normalize();\n\n      if (Math.abs(Vector3.Dot(d1, d2)) > 0.999) {\n        return true;\n      }\n\n      var normal = Vector3.Cross(d1, d2).normalize();\n      deletedArray[i] = false;\n\n      if (Vector3.Dot(normal, t.normal) < 0.2) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  QuadraticErrorSimplification.prototype.updateTriangles = function (origVertex, vertex, deletedArray, deletedTriangles) {\n    var newDeleted = deletedTriangles;\n\n    for (var i = 0; i < vertex.triangleCount; ++i) {\n      var ref = this.references[vertex.triangleStart + i];\n      var t = this.triangles[ref.triangleId];\n\n      if (t.deleted) {\n        continue;\n      }\n\n      if (deletedArray[i] && t.deletePending) {\n        t.deleted = true;\n        newDeleted++;\n        continue;\n      }\n\n      t.vertices[ref.vertexId] = origVertex;\n      t.isDirty = true;\n      t.error[0] = this.calculateError(t.vertices[0], t.vertices[1]) + t.borderFactor / 2;\n      t.error[1] = this.calculateError(t.vertices[1], t.vertices[2]) + t.borderFactor / 2;\n      t.error[2] = this.calculateError(t.vertices[2], t.vertices[0]) + t.borderFactor / 2;\n      t.error[3] = Math.min(t.error[0], t.error[1], t.error[2]);\n      this.references.push(ref);\n    }\n\n    return newDeleted;\n  };\n\n  QuadraticErrorSimplification.prototype.identifyBorder = function () {\n    for (var i = 0; i < this.vertices.length; ++i) {\n      var vCount = [];\n      var vId = [];\n      var v = this.vertices[i];\n      var j;\n\n      for (j = 0; j < v.triangleCount; ++j) {\n        var triangle = this.triangles[this.references[v.triangleStart + j].triangleId];\n\n        for (var ii = 0; ii < 3; ii++) {\n          var ofs = 0;\n          var vv = triangle.vertices[ii];\n\n          while (ofs < vCount.length) {\n            if (vId[ofs] === vv.id) {\n              break;\n            }\n\n            ++ofs;\n          }\n\n          if (ofs === vCount.length) {\n            vCount.push(1);\n            vId.push(vv.id);\n          } else {\n            vCount[ofs]++;\n          }\n        }\n      }\n\n      for (j = 0; j < vCount.length; ++j) {\n        if (vCount[j] === 1) {\n          this.vertices[vId[j]].isBorder = true;\n        } else {\n          this.vertices[vId[j]].isBorder = false;\n        }\n      }\n    }\n  };\n\n  QuadraticErrorSimplification.prototype.updateMesh = function (identifyBorders) {\n    if (identifyBorders === void 0) {\n      identifyBorders = false;\n    }\n\n    var i;\n\n    if (!identifyBorders) {\n      var newTrianglesVector = [];\n\n      for (i = 0; i < this.triangles.length; ++i) {\n        if (!this.triangles[i].deleted) {\n          newTrianglesVector.push(this.triangles[i]);\n        }\n      }\n\n      this.triangles = newTrianglesVector;\n    }\n\n    for (i = 0; i < this.vertices.length; ++i) {\n      this.vertices[i].triangleCount = 0;\n      this.vertices[i].triangleStart = 0;\n    }\n\n    var t;\n    var j;\n    var v;\n\n    for (i = 0; i < this.triangles.length; ++i) {\n      t = this.triangles[i];\n\n      for (j = 0; j < 3; ++j) {\n        v = t.vertices[j];\n        v.triangleCount++;\n      }\n    }\n\n    var tStart = 0;\n\n    for (i = 0; i < this.vertices.length; ++i) {\n      this.vertices[i].triangleStart = tStart;\n      tStart += this.vertices[i].triangleCount;\n      this.vertices[i].triangleCount = 0;\n    }\n\n    var newReferences = new Array(this.triangles.length * 3);\n\n    for (i = 0; i < this.triangles.length; ++i) {\n      t = this.triangles[i];\n\n      for (j = 0; j < 3; ++j) {\n        v = t.vertices[j];\n        newReferences[v.triangleStart + v.triangleCount] = new Reference(j, i);\n        v.triangleCount++;\n      }\n    }\n\n    this.references = newReferences;\n\n    if (identifyBorders) {\n      this.identifyBorder();\n    }\n  };\n\n  QuadraticErrorSimplification.prototype.vertexError = function (q, point) {\n    var x = point.x;\n    var y = point.y;\n    var z = point.z;\n    return q.data[0] * x * x + 2 * q.data[1] * x * y + 2 * q.data[2] * x * z + 2 * q.data[3] * x + q.data[4] * y * y + 2 * q.data[5] * y * z + 2 * q.data[6] * y + q.data[7] * z * z + 2 * q.data[8] * z + q.data[9];\n  };\n\n  QuadraticErrorSimplification.prototype.calculateError = function (vertex1, vertex2, pointResult) {\n    var q = vertex1.q.add(vertex2.q);\n    var border = vertex1.isBorder && vertex2.isBorder;\n    var error = 0;\n    var qDet = q.det(0, 1, 2, 1, 4, 5, 2, 5, 7);\n\n    if (qDet !== 0 && !border) {\n      if (!pointResult) {\n        pointResult = Vector3.Zero();\n      }\n\n      pointResult.x = -1 / qDet * q.det(1, 2, 3, 4, 5, 6, 5, 7, 8);\n      pointResult.y = 1 / qDet * q.det(0, 2, 3, 1, 5, 6, 2, 7, 8);\n      pointResult.z = -1 / qDet * q.det(0, 1, 3, 1, 4, 6, 2, 5, 8);\n      error = this.vertexError(q, pointResult);\n    } else {\n      var p3 = vertex1.position.add(vertex2.position).divide(new Vector3(2, 2, 2)); //var norm3 = (vertex1.normal.add(vertex2.normal)).divide(new Vector3(2, 2, 2)).normalize();\n\n      var error1 = this.vertexError(q, vertex1.position);\n      var error2 = this.vertexError(q, vertex2.position);\n      var error3 = this.vertexError(q, p3);\n      error = Math.min(error1, error2, error3);\n\n      if (error === error1) {\n        if (pointResult) {\n          pointResult.copyFrom(vertex1.position);\n        }\n      } else if (error === error2) {\n        if (pointResult) {\n          pointResult.copyFrom(vertex2.position);\n        }\n      } else {\n        if (pointResult) {\n          pointResult.copyFrom(p3);\n        }\n      }\n    }\n\n    return error;\n  };\n\n  return QuadraticErrorSimplification;\n}();\n\nexport { QuadraticErrorSimplification };","map":{"version":3,"sources":["C:/Users/rober/Documents/Computer Science/Side Projects/arcade/node_modules/@babylonjs/core/Meshes/meshSimplification.js"],"names":["Vector3","VertexBuffer","SubMesh","Mesh","AsyncLoop","Epsilon","SimplificationSettings","quality","distance","optimizeMesh","SimplificationQueue","running","_simplificationArray","prototype","addTask","task","push","executeNext","pop","runSimplification","_this","parallelProcessing","settings","forEach","setting","simplifier","getSimplifier","simplify","newMesh","undefined","mesh","addLODLevel","isVisible","length","successCallback","runDecimation","callback","Run","loop","index","simplificationType","SimplificationType","QUADRATIC","QuadraticErrorSimplification","DecimationTriangle","vertices","error","Array","deleted","isDirty","deletePending","borderFactor","DecimationVertex","position","id","isBorder","q","QuadraticMatrix","triangleCount","triangleStart","originalOffsets","updatePosition","newPosition","copyFrom","data","i","det","a11","a12","a13","a21","a22","a23","a31","a32","a33","addInPlace","matrix","addArrayInPlace","add","m","FromData","a","b","c","d","DataFromNumbers","Reference","vertexId","triangleId","_mesh","syncIterations","aggressiveness","decimationIterations","boundingBoxEpsilon","initDecimatedMesh","subMeshes","initWithMesh","setTimeout","_reconstructedMesh","submeshIndex","targetCount","triangles","deletedTriangles","iterationFunction","iteration","updateMesh","threshold","Math","pow","trianglesIterator","tIdx","t","j","deleted0","deleted1","v0","v1","p","Zero","calculateError","delTr","isFlipped","indexOf","uniqueArray","deletedT","tStart","references","updateTriangles","tCount","SyncAsyncForLoop","breakLoop","reconstructMesh","positionData","getVerticesData","PositionKind","indices","getIndices","submesh","findInVertices","positionToSearch","ii","equalsWithEpsilon","vertexReferences","vertexInit","offset","verticesStart","FromArray","vertex","totalVertices","verticesCount","indicesInit","indexStart","pos","i0","i1","i2","v2","triangle","originalOffset","indexCount","init","triangleInit1","normal","Cross","subtract","normalize","x","y","z","Dot","triangleInit2","min","newTriangles","newPositionData","newNormalData","NormalKind","newUVsData","UVKind","newColorsData","ColorKind","normalData","uvs","colorsData","vertexCount","startingIndex","getTotalIndices","startingVertex","getTotalVertices","submeshesArray","newIndicesArray","originalIndices","idx","setIndices","setVerticesData","originalSubmesh","AddToMesh","materialIndex","getMesh","name","getScene","material","parent","renderingGroupId","vertex1","vertex2","point","deletedArray","s","d1","d2","abs","origVertex","newDeleted","ref","identifyBorder","vCount","vId","v","ofs","vv","identifyBorders","newTrianglesVector","newReferences","vertexError","pointResult","border","qDet","p3","divide","error1","error2","error3"],"mappings":"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","sourcesContent":["import { Vector3 } from \"../Maths/math.vector\";\r\nimport { VertexBuffer } from \"../Meshes/buffer\";\r\nimport { SubMesh } from \"../Meshes/subMesh\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { AsyncLoop } from \"../Misc/tools\";\r\nimport { Epsilon } from '../Maths/math.constants';\r\n/**\r\n * Class used to specify simplification options\r\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n */\r\nvar SimplificationSettings = /** @class */ (function () {\r\n    /**\r\n     * Creates a SimplificationSettings\r\n     * @param quality expected quality\r\n     * @param distance distance when this optimized version should be used\r\n     * @param optimizeMesh already optimized mesh\r\n     */\r\n    function SimplificationSettings(\r\n    /** expected quality */\r\n    quality, \r\n    /** distance when this optimized version should be used */\r\n    distance, \r\n    /** already optimized mesh  */\r\n    optimizeMesh) {\r\n        this.quality = quality;\r\n        this.distance = distance;\r\n        this.optimizeMesh = optimizeMesh;\r\n    }\r\n    return SimplificationSettings;\r\n}());\r\nexport { SimplificationSettings };\r\n/**\r\n * Queue used to order the simplification tasks\r\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n */\r\nvar SimplificationQueue = /** @class */ (function () {\r\n    /**\r\n     * Creates a new queue\r\n     */\r\n    function SimplificationQueue() {\r\n        this.running = false;\r\n        this._simplificationArray = [];\r\n    }\r\n    /**\r\n     * Adds a new simplification task\r\n     * @param task defines a task to add\r\n     */\r\n    SimplificationQueue.prototype.addTask = function (task) {\r\n        this._simplificationArray.push(task);\r\n    };\r\n    /**\r\n     * Execute next task\r\n     */\r\n    SimplificationQueue.prototype.executeNext = function () {\r\n        var task = this._simplificationArray.pop();\r\n        if (task) {\r\n            this.running = true;\r\n            this.runSimplification(task);\r\n        }\r\n        else {\r\n            this.running = false;\r\n        }\r\n    };\r\n    /**\r\n     * Execute a simplification task\r\n     * @param task defines the task to run\r\n     */\r\n    SimplificationQueue.prototype.runSimplification = function (task) {\r\n        var _this = this;\r\n        if (task.parallelProcessing) {\r\n            //parallel simplifier\r\n            task.settings.forEach(function (setting) {\r\n                var simplifier = _this.getSimplifier(task);\r\n                simplifier.simplify(setting, function (newMesh) {\r\n                    if (setting.distance !== undefined) {\r\n                        task.mesh.addLODLevel(setting.distance, newMesh);\r\n                    }\r\n                    newMesh.isVisible = true;\r\n                    //check if it is the last\r\n                    if (setting.quality === task.settings[task.settings.length - 1].quality && task.successCallback) {\r\n                        //all done, run the success callback.\r\n                        task.successCallback();\r\n                    }\r\n                    _this.executeNext();\r\n                });\r\n            });\r\n        }\r\n        else {\r\n            //single simplifier.\r\n            var simplifier = this.getSimplifier(task);\r\n            var runDecimation = function (setting, callback) {\r\n                simplifier.simplify(setting, function (newMesh) {\r\n                    if (setting.distance !== undefined) {\r\n                        task.mesh.addLODLevel(setting.distance, newMesh);\r\n                    }\r\n                    newMesh.isVisible = true;\r\n                    //run the next quality level\r\n                    callback();\r\n                });\r\n            };\r\n            AsyncLoop.Run(task.settings.length, function (loop) {\r\n                runDecimation(task.settings[loop.index], function () {\r\n                    loop.executeNext();\r\n                });\r\n            }, function () {\r\n                //execution ended, run the success callback.\r\n                if (task.successCallback) {\r\n                    task.successCallback();\r\n                }\r\n                _this.executeNext();\r\n            });\r\n        }\r\n    };\r\n    SimplificationQueue.prototype.getSimplifier = function (task) {\r\n        switch (task.simplificationType) {\r\n            case SimplificationType.QUADRATIC:\r\n            default:\r\n                return new QuadraticErrorSimplification(task.mesh);\r\n        }\r\n    };\r\n    return SimplificationQueue;\r\n}());\r\nexport { SimplificationQueue };\r\n/**\r\n * The implemented types of simplification\r\n * At the moment only Quadratic Error Decimation is implemented\r\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n */\r\nexport var SimplificationType;\r\n(function (SimplificationType) {\r\n    /** Quadratic error decimation */\r\n    SimplificationType[SimplificationType[\"QUADRATIC\"] = 0] = \"QUADRATIC\";\r\n})(SimplificationType || (SimplificationType = {}));\r\nvar DecimationTriangle = /** @class */ (function () {\r\n    function DecimationTriangle(vertices) {\r\n        this.vertices = vertices;\r\n        this.error = new Array(4);\r\n        this.deleted = false;\r\n        this.isDirty = false;\r\n        this.deletePending = false;\r\n        this.borderFactor = 0;\r\n    }\r\n    return DecimationTriangle;\r\n}());\r\nvar DecimationVertex = /** @class */ (function () {\r\n    function DecimationVertex(position, id) {\r\n        this.position = position;\r\n        this.id = id;\r\n        this.isBorder = true;\r\n        this.q = new QuadraticMatrix();\r\n        this.triangleCount = 0;\r\n        this.triangleStart = 0;\r\n        this.originalOffsets = [];\r\n    }\r\n    DecimationVertex.prototype.updatePosition = function (newPosition) {\r\n        this.position.copyFrom(newPosition);\r\n    };\r\n    return DecimationVertex;\r\n}());\r\nvar QuadraticMatrix = /** @class */ (function () {\r\n    function QuadraticMatrix(data) {\r\n        this.data = new Array(10);\r\n        for (var i = 0; i < 10; ++i) {\r\n            if (data && data[i]) {\r\n                this.data[i] = data[i];\r\n            }\r\n            else {\r\n                this.data[i] = 0;\r\n            }\r\n        }\r\n    }\r\n    QuadraticMatrix.prototype.det = function (a11, a12, a13, a21, a22, a23, a31, a32, a33) {\r\n        var det = this.data[a11] * this.data[a22] * this.data[a33] + this.data[a13] * this.data[a21] * this.data[a32] +\r\n            this.data[a12] * this.data[a23] * this.data[a31] - this.data[a13] * this.data[a22] * this.data[a31] -\r\n            this.data[a11] * this.data[a23] * this.data[a32] - this.data[a12] * this.data[a21] * this.data[a33];\r\n        return det;\r\n    };\r\n    QuadraticMatrix.prototype.addInPlace = function (matrix) {\r\n        for (var i = 0; i < 10; ++i) {\r\n            this.data[i] += matrix.data[i];\r\n        }\r\n    };\r\n    QuadraticMatrix.prototype.addArrayInPlace = function (data) {\r\n        for (var i = 0; i < 10; ++i) {\r\n            this.data[i] += data[i];\r\n        }\r\n    };\r\n    QuadraticMatrix.prototype.add = function (matrix) {\r\n        var m = new QuadraticMatrix();\r\n        for (var i = 0; i < 10; ++i) {\r\n            m.data[i] = this.data[i] + matrix.data[i];\r\n        }\r\n        return m;\r\n    };\r\n    QuadraticMatrix.FromData = function (a, b, c, d) {\r\n        return new QuadraticMatrix(QuadraticMatrix.DataFromNumbers(a, b, c, d));\r\n    };\r\n    //returning an array to avoid garbage collection\r\n    QuadraticMatrix.DataFromNumbers = function (a, b, c, d) {\r\n        return [a * a, a * b, a * c, a * d, b * b, b * c, b * d, c * c, c * d, d * d];\r\n    };\r\n    return QuadraticMatrix;\r\n}());\r\nvar Reference = /** @class */ (function () {\r\n    function Reference(vertexId, triangleId) {\r\n        this.vertexId = vertexId;\r\n        this.triangleId = triangleId;\r\n    }\r\n    return Reference;\r\n}());\r\n/**\r\n * An implementation of the Quadratic Error simplification algorithm.\r\n * Original paper : http://www1.cs.columbia.edu/~cs4162/html05s/garland97.pdf\r\n * Ported mostly from QSlim and http://voxels.blogspot.de/2014/05/quadric-mesh-simplification-with-source.html to babylon JS\r\n * @author RaananW\r\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n */\r\nvar QuadraticErrorSimplification = /** @class */ (function () {\r\n    /**\r\n     * Creates a new QuadraticErrorSimplification\r\n     * @param _mesh defines the target mesh\r\n     */\r\n    function QuadraticErrorSimplification(_mesh) {\r\n        this._mesh = _mesh;\r\n        /** Gets or sets the number pf sync interations */\r\n        this.syncIterations = 5000;\r\n        this.aggressiveness = 7;\r\n        this.decimationIterations = 100;\r\n        this.boundingBoxEpsilon = Epsilon;\r\n    }\r\n    /**\r\n     * Simplification of a given mesh according to the given settings.\r\n     * Since this requires computation, it is assumed that the function runs async.\r\n     * @param settings The settings of the simplification, including quality and distance\r\n     * @param successCallback A callback that will be called after the mesh was simplified.\r\n     */\r\n    QuadraticErrorSimplification.prototype.simplify = function (settings, successCallback) {\r\n        var _this = this;\r\n        this.initDecimatedMesh();\r\n        //iterating through the submeshes array, one after the other.\r\n        AsyncLoop.Run(this._mesh.subMeshes.length, function (loop) {\r\n            _this.initWithMesh(loop.index, function () {\r\n                _this.runDecimation(settings, loop.index, function () {\r\n                    loop.executeNext();\r\n                });\r\n            }, settings.optimizeMesh);\r\n        }, function () {\r\n            setTimeout(function () {\r\n                successCallback(_this._reconstructedMesh);\r\n            }, 0);\r\n        });\r\n    };\r\n    QuadraticErrorSimplification.prototype.runDecimation = function (settings, submeshIndex, successCallback) {\r\n        var _this = this;\r\n        var targetCount = ~~(this.triangles.length * settings.quality);\r\n        var deletedTriangles = 0;\r\n        var triangleCount = this.triangles.length;\r\n        var iterationFunction = function (iteration, callback) {\r\n            setTimeout(function () {\r\n                if (iteration % 5 === 0) {\r\n                    _this.updateMesh(iteration === 0);\r\n                }\r\n                for (var i = 0; i < _this.triangles.length; ++i) {\r\n                    _this.triangles[i].isDirty = false;\r\n                }\r\n                var threshold = 0.000000001 * Math.pow((iteration + 3), _this.aggressiveness);\r\n                var trianglesIterator = function (i) {\r\n                    var tIdx = ~~(((_this.triangles.length / 2) + i) % _this.triangles.length);\r\n                    var t = _this.triangles[tIdx];\r\n                    if (!t) {\r\n                        return;\r\n                    }\r\n                    if (t.error[3] > threshold || t.deleted || t.isDirty) {\r\n                        return;\r\n                    }\r\n                    for (var j = 0; j < 3; ++j) {\r\n                        if (t.error[j] < threshold) {\r\n                            var deleted0 = [];\r\n                            var deleted1 = [];\r\n                            var v0 = t.vertices[j];\r\n                            var v1 = t.vertices[(j + 1) % 3];\r\n                            if (v0.isBorder || v1.isBorder) {\r\n                                continue;\r\n                            }\r\n                            var p = Vector3.Zero();\r\n                            // var n = Vector3.Zero();\r\n                            // var uv = Vector2.Zero();\r\n                            // var color = new Color4(0, 0, 0, 1);\r\n                            _this.calculateError(v0, v1, p);\r\n                            var delTr = new Array();\r\n                            if (_this.isFlipped(v0, v1, p, deleted0, delTr)) {\r\n                                continue;\r\n                            }\r\n                            if (_this.isFlipped(v1, v0, p, deleted1, delTr)) {\r\n                                continue;\r\n                            }\r\n                            if (deleted0.indexOf(true) < 0 || deleted1.indexOf(true) < 0) {\r\n                                continue;\r\n                            }\r\n                            var uniqueArray = new Array();\r\n                            delTr.forEach(function (deletedT) {\r\n                                if (uniqueArray.indexOf(deletedT) === -1) {\r\n                                    deletedT.deletePending = true;\r\n                                    uniqueArray.push(deletedT);\r\n                                }\r\n                            });\r\n                            if (uniqueArray.length % 2 !== 0) {\r\n                                continue;\r\n                            }\r\n                            v0.q = v1.q.add(v0.q);\r\n                            v0.updatePosition(p);\r\n                            var tStart = _this.references.length;\r\n                            deletedTriangles = _this.updateTriangles(v0, v0, deleted0, deletedTriangles);\r\n                            deletedTriangles = _this.updateTriangles(v0, v1, deleted1, deletedTriangles);\r\n                            var tCount = _this.references.length - tStart;\r\n                            if (tCount <= v0.triangleCount) {\r\n                                if (tCount) {\r\n                                    for (var c = 0; c < tCount; c++) {\r\n                                        _this.references[v0.triangleStart + c] = _this.references[tStart + c];\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                v0.triangleStart = tStart;\r\n                            }\r\n                            v0.triangleCount = tCount;\r\n                            break;\r\n                        }\r\n                    }\r\n                };\r\n                AsyncLoop.SyncAsyncForLoop(_this.triangles.length, _this.syncIterations, trianglesIterator, callback, function () { return (triangleCount - deletedTriangles <= targetCount); });\r\n            }, 0);\r\n        };\r\n        AsyncLoop.Run(this.decimationIterations, function (loop) {\r\n            if (triangleCount - deletedTriangles <= targetCount) {\r\n                loop.breakLoop();\r\n            }\r\n            else {\r\n                iterationFunction(loop.index, function () {\r\n                    loop.executeNext();\r\n                });\r\n            }\r\n        }, function () {\r\n            setTimeout(function () {\r\n                //reconstruct this part of the mesh\r\n                _this.reconstructMesh(submeshIndex);\r\n                successCallback();\r\n            }, 0);\r\n        });\r\n    };\r\n    QuadraticErrorSimplification.prototype.initWithMesh = function (submeshIndex, callback, optimizeMesh) {\r\n        var _this = this;\r\n        this.vertices = [];\r\n        this.triangles = [];\r\n        var positionData = this._mesh.getVerticesData(VertexBuffer.PositionKind);\r\n        var indices = this._mesh.getIndices();\r\n        var submesh = this._mesh.subMeshes[submeshIndex];\r\n        var findInVertices = function (positionToSearch) {\r\n            if (optimizeMesh) {\r\n                for (var ii = 0; ii < _this.vertices.length; ++ii) {\r\n                    if (_this.vertices[ii].position.equalsWithEpsilon(positionToSearch, 0.0001)) {\r\n                        return _this.vertices[ii];\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        var vertexReferences = [];\r\n        var vertexInit = function (i) {\r\n            if (!positionData) {\r\n                return;\r\n            }\r\n            var offset = i + submesh.verticesStart;\r\n            var position = Vector3.FromArray(positionData, offset * 3);\r\n            var vertex = findInVertices(position) || new DecimationVertex(position, _this.vertices.length);\r\n            vertex.originalOffsets.push(offset);\r\n            if (vertex.id === _this.vertices.length) {\r\n                _this.vertices.push(vertex);\r\n            }\r\n            vertexReferences.push(vertex.id);\r\n        };\r\n        //var totalVertices = mesh.getTotalVertices();\r\n        var totalVertices = submesh.verticesCount;\r\n        AsyncLoop.SyncAsyncForLoop(totalVertices, (this.syncIterations / 4) >> 0, vertexInit, function () {\r\n            var indicesInit = function (i) {\r\n                if (!indices) {\r\n                    return;\r\n                }\r\n                var offset = (submesh.indexStart / 3) + i;\r\n                var pos = (offset * 3);\r\n                var i0 = indices[pos + 0];\r\n                var i1 = indices[pos + 1];\r\n                var i2 = indices[pos + 2];\r\n                var v0 = _this.vertices[vertexReferences[i0 - submesh.verticesStart]];\r\n                var v1 = _this.vertices[vertexReferences[i1 - submesh.verticesStart]];\r\n                var v2 = _this.vertices[vertexReferences[i2 - submesh.verticesStart]];\r\n                var triangle = new DecimationTriangle([v0, v1, v2]);\r\n                triangle.originalOffset = pos;\r\n                _this.triangles.push(triangle);\r\n            };\r\n            AsyncLoop.SyncAsyncForLoop(submesh.indexCount / 3, _this.syncIterations, indicesInit, function () {\r\n                _this.init(callback);\r\n            });\r\n        });\r\n    };\r\n    QuadraticErrorSimplification.prototype.init = function (callback) {\r\n        var _this = this;\r\n        var triangleInit1 = function (i) {\r\n            var t = _this.triangles[i];\r\n            t.normal = Vector3.Cross(t.vertices[1].position.subtract(t.vertices[0].position), t.vertices[2].position.subtract(t.vertices[0].position)).normalize();\r\n            for (var j = 0; j < 3; j++) {\r\n                t.vertices[j].q.addArrayInPlace(QuadraticMatrix.DataFromNumbers(t.normal.x, t.normal.y, t.normal.z, -(Vector3.Dot(t.normal, t.vertices[0].position))));\r\n            }\r\n        };\r\n        AsyncLoop.SyncAsyncForLoop(this.triangles.length, this.syncIterations, triangleInit1, function () {\r\n            var triangleInit2 = function (i) {\r\n                var t = _this.triangles[i];\r\n                for (var j = 0; j < 3; ++j) {\r\n                    t.error[j] = _this.calculateError(t.vertices[j], t.vertices[(j + 1) % 3]);\r\n                }\r\n                t.error[3] = Math.min(t.error[0], t.error[1], t.error[2]);\r\n            };\r\n            AsyncLoop.SyncAsyncForLoop(_this.triangles.length, _this.syncIterations, triangleInit2, function () {\r\n                callback();\r\n            });\r\n        });\r\n    };\r\n    QuadraticErrorSimplification.prototype.reconstructMesh = function (submeshIndex) {\r\n        var newTriangles = [];\r\n        var i;\r\n        for (i = 0; i < this.vertices.length; ++i) {\r\n            this.vertices[i].triangleCount = 0;\r\n        }\r\n        var t;\r\n        var j;\r\n        for (i = 0; i < this.triangles.length; ++i) {\r\n            if (!this.triangles[i].deleted) {\r\n                t = this.triangles[i];\r\n                for (j = 0; j < 3; ++j) {\r\n                    t.vertices[j].triangleCount = 1;\r\n                }\r\n                newTriangles.push(t);\r\n            }\r\n        }\r\n        var newPositionData = (this._reconstructedMesh.getVerticesData(VertexBuffer.PositionKind) || []);\r\n        var newNormalData = (this._reconstructedMesh.getVerticesData(VertexBuffer.NormalKind) || []);\r\n        var newUVsData = (this._reconstructedMesh.getVerticesData(VertexBuffer.UVKind) || []);\r\n        var newColorsData = (this._reconstructedMesh.getVerticesData(VertexBuffer.ColorKind) || []);\r\n        var normalData = this._mesh.getVerticesData(VertexBuffer.NormalKind);\r\n        var uvs = this._mesh.getVerticesData(VertexBuffer.UVKind);\r\n        var colorsData = this._mesh.getVerticesData(VertexBuffer.ColorKind);\r\n        var vertexCount = 0;\r\n        for (i = 0; i < this.vertices.length; ++i) {\r\n            var vertex = this.vertices[i];\r\n            vertex.id = vertexCount;\r\n            if (vertex.triangleCount) {\r\n                vertex.originalOffsets.forEach(function (originalOffset) {\r\n                    newPositionData.push(vertex.position.x);\r\n                    newPositionData.push(vertex.position.y);\r\n                    newPositionData.push(vertex.position.z);\r\n                    if (normalData && normalData.length) {\r\n                        newNormalData.push(normalData[originalOffset * 3]);\r\n                        newNormalData.push(normalData[(originalOffset * 3) + 1]);\r\n                        newNormalData.push(normalData[(originalOffset * 3) + 2]);\r\n                    }\r\n                    if (uvs && uvs.length) {\r\n                        newUVsData.push(uvs[(originalOffset * 2)]);\r\n                        newUVsData.push(uvs[(originalOffset * 2) + 1]);\r\n                    }\r\n                    if (colorsData && colorsData.length) {\r\n                        newColorsData.push(colorsData[(originalOffset * 4)]);\r\n                        newColorsData.push(colorsData[(originalOffset * 4) + 1]);\r\n                        newColorsData.push(colorsData[(originalOffset * 4) + 2]);\r\n                        newColorsData.push(colorsData[(originalOffset * 4) + 3]);\r\n                    }\r\n                    ++vertexCount;\r\n                });\r\n            }\r\n        }\r\n        var startingIndex = this._reconstructedMesh.getTotalIndices();\r\n        var startingVertex = this._reconstructedMesh.getTotalVertices();\r\n        var submeshesArray = this._reconstructedMesh.subMeshes;\r\n        this._reconstructedMesh.subMeshes = [];\r\n        var newIndicesArray = this._reconstructedMesh.getIndices(); //[];\r\n        var originalIndices = this._mesh.getIndices();\r\n        for (i = 0; i < newTriangles.length; ++i) {\r\n            t = newTriangles[i]; //now get the new referencing point for each vertex\r\n            [0, 1, 2].forEach(function (idx) {\r\n                var id = originalIndices[t.originalOffset + idx];\r\n                var offset = t.vertices[idx].originalOffsets.indexOf(id);\r\n                if (offset < 0) {\r\n                    offset = 0;\r\n                }\r\n                newIndicesArray.push(t.vertices[idx].id + offset + startingVertex);\r\n            });\r\n        }\r\n        //overwriting the old vertex buffers and indices.\r\n        this._reconstructedMesh.setIndices(newIndicesArray);\r\n        this._reconstructedMesh.setVerticesData(VertexBuffer.PositionKind, newPositionData);\r\n        if (newNormalData.length > 0) {\r\n            this._reconstructedMesh.setVerticesData(VertexBuffer.NormalKind, newNormalData);\r\n        }\r\n        if (newUVsData.length > 0) {\r\n            this._reconstructedMesh.setVerticesData(VertexBuffer.UVKind, newUVsData);\r\n        }\r\n        if (newColorsData.length > 0) {\r\n            this._reconstructedMesh.setVerticesData(VertexBuffer.ColorKind, newColorsData);\r\n        }\r\n        //create submesh\r\n        var originalSubmesh = this._mesh.subMeshes[submeshIndex];\r\n        if (submeshIndex > 0) {\r\n            this._reconstructedMesh.subMeshes = [];\r\n            submeshesArray.forEach(function (submesh) {\r\n                SubMesh.AddToMesh(submesh.materialIndex, submesh.verticesStart, submesh.verticesCount, /* 0, newPositionData.length/3, */ submesh.indexStart, submesh.indexCount, submesh.getMesh());\r\n            });\r\n            SubMesh.AddToMesh(originalSubmesh.materialIndex, startingVertex, vertexCount, /* 0, newPositionData.length / 3, */ startingIndex, newTriangles.length * 3, this._reconstructedMesh);\r\n        }\r\n    };\r\n    QuadraticErrorSimplification.prototype.initDecimatedMesh = function () {\r\n        this._reconstructedMesh = new Mesh(this._mesh.name + \"Decimated\", this._mesh.getScene());\r\n        this._reconstructedMesh.material = this._mesh.material;\r\n        this._reconstructedMesh.parent = this._mesh.parent;\r\n        this._reconstructedMesh.isVisible = false;\r\n        this._reconstructedMesh.renderingGroupId = this._mesh.renderingGroupId;\r\n    };\r\n    QuadraticErrorSimplification.prototype.isFlipped = function (vertex1, vertex2, point, deletedArray, delTr) {\r\n        for (var i = 0; i < vertex1.triangleCount; ++i) {\r\n            var t = this.triangles[this.references[vertex1.triangleStart + i].triangleId];\r\n            if (t.deleted) {\r\n                continue;\r\n            }\r\n            var s = this.references[vertex1.triangleStart + i].vertexId;\r\n            var v1 = t.vertices[(s + 1) % 3];\r\n            var v2 = t.vertices[(s + 2) % 3];\r\n            if ((v1 === vertex2 || v2 === vertex2)) {\r\n                deletedArray[i] = true;\r\n                delTr.push(t);\r\n                continue;\r\n            }\r\n            var d1 = v1.position.subtract(point);\r\n            d1 = d1.normalize();\r\n            var d2 = v2.position.subtract(point);\r\n            d2 = d2.normalize();\r\n            if (Math.abs(Vector3.Dot(d1, d2)) > 0.999) {\r\n                return true;\r\n            }\r\n            var normal = Vector3.Cross(d1, d2).normalize();\r\n            deletedArray[i] = false;\r\n            if (Vector3.Dot(normal, t.normal) < 0.2) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    QuadraticErrorSimplification.prototype.updateTriangles = function (origVertex, vertex, deletedArray, deletedTriangles) {\r\n        var newDeleted = deletedTriangles;\r\n        for (var i = 0; i < vertex.triangleCount; ++i) {\r\n            var ref = this.references[vertex.triangleStart + i];\r\n            var t = this.triangles[ref.triangleId];\r\n            if (t.deleted) {\r\n                continue;\r\n            }\r\n            if (deletedArray[i] && t.deletePending) {\r\n                t.deleted = true;\r\n                newDeleted++;\r\n                continue;\r\n            }\r\n            t.vertices[ref.vertexId] = origVertex;\r\n            t.isDirty = true;\r\n            t.error[0] = this.calculateError(t.vertices[0], t.vertices[1]) + (t.borderFactor / 2);\r\n            t.error[1] = this.calculateError(t.vertices[1], t.vertices[2]) + (t.borderFactor / 2);\r\n            t.error[2] = this.calculateError(t.vertices[2], t.vertices[0]) + (t.borderFactor / 2);\r\n            t.error[3] = Math.min(t.error[0], t.error[1], t.error[2]);\r\n            this.references.push(ref);\r\n        }\r\n        return newDeleted;\r\n    };\r\n    QuadraticErrorSimplification.prototype.identifyBorder = function () {\r\n        for (var i = 0; i < this.vertices.length; ++i) {\r\n            var vCount = [];\r\n            var vId = [];\r\n            var v = this.vertices[i];\r\n            var j;\r\n            for (j = 0; j < v.triangleCount; ++j) {\r\n                var triangle = this.triangles[this.references[v.triangleStart + j].triangleId];\r\n                for (var ii = 0; ii < 3; ii++) {\r\n                    var ofs = 0;\r\n                    var vv = triangle.vertices[ii];\r\n                    while (ofs < vCount.length) {\r\n                        if (vId[ofs] === vv.id) {\r\n                            break;\r\n                        }\r\n                        ++ofs;\r\n                    }\r\n                    if (ofs === vCount.length) {\r\n                        vCount.push(1);\r\n                        vId.push(vv.id);\r\n                    }\r\n                    else {\r\n                        vCount[ofs]++;\r\n                    }\r\n                }\r\n            }\r\n            for (j = 0; j < vCount.length; ++j) {\r\n                if (vCount[j] === 1) {\r\n                    this.vertices[vId[j]].isBorder = true;\r\n                }\r\n                else {\r\n                    this.vertices[vId[j]].isBorder = false;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    QuadraticErrorSimplification.prototype.updateMesh = function (identifyBorders) {\r\n        if (identifyBorders === void 0) { identifyBorders = false; }\r\n        var i;\r\n        if (!identifyBorders) {\r\n            var newTrianglesVector = [];\r\n            for (i = 0; i < this.triangles.length; ++i) {\r\n                if (!this.triangles[i].deleted) {\r\n                    newTrianglesVector.push(this.triangles[i]);\r\n                }\r\n            }\r\n            this.triangles = newTrianglesVector;\r\n        }\r\n        for (i = 0; i < this.vertices.length; ++i) {\r\n            this.vertices[i].triangleCount = 0;\r\n            this.vertices[i].triangleStart = 0;\r\n        }\r\n        var t;\r\n        var j;\r\n        var v;\r\n        for (i = 0; i < this.triangles.length; ++i) {\r\n            t = this.triangles[i];\r\n            for (j = 0; j < 3; ++j) {\r\n                v = t.vertices[j];\r\n                v.triangleCount++;\r\n            }\r\n        }\r\n        var tStart = 0;\r\n        for (i = 0; i < this.vertices.length; ++i) {\r\n            this.vertices[i].triangleStart = tStart;\r\n            tStart += this.vertices[i].triangleCount;\r\n            this.vertices[i].triangleCount = 0;\r\n        }\r\n        var newReferences = new Array(this.triangles.length * 3);\r\n        for (i = 0; i < this.triangles.length; ++i) {\r\n            t = this.triangles[i];\r\n            for (j = 0; j < 3; ++j) {\r\n                v = t.vertices[j];\r\n                newReferences[v.triangleStart + v.triangleCount] = new Reference(j, i);\r\n                v.triangleCount++;\r\n            }\r\n        }\r\n        this.references = newReferences;\r\n        if (identifyBorders) {\r\n            this.identifyBorder();\r\n        }\r\n    };\r\n    QuadraticErrorSimplification.prototype.vertexError = function (q, point) {\r\n        var x = point.x;\r\n        var y = point.y;\r\n        var z = point.z;\r\n        return q.data[0] * x * x + 2 * q.data[1] * x * y + 2 * q.data[2] * x * z + 2 * q.data[3] * x + q.data[4] * y * y\r\n            + 2 * q.data[5] * y * z + 2 * q.data[6] * y + q.data[7] * z * z + 2 * q.data[8] * z + q.data[9];\r\n    };\r\n    QuadraticErrorSimplification.prototype.calculateError = function (vertex1, vertex2, pointResult) {\r\n        var q = vertex1.q.add(vertex2.q);\r\n        var border = vertex1.isBorder && vertex2.isBorder;\r\n        var error = 0;\r\n        var qDet = q.det(0, 1, 2, 1, 4, 5, 2, 5, 7);\r\n        if (qDet !== 0 && !border) {\r\n            if (!pointResult) {\r\n                pointResult = Vector3.Zero();\r\n            }\r\n            pointResult.x = -1 / qDet * (q.det(1, 2, 3, 4, 5, 6, 5, 7, 8));\r\n            pointResult.y = 1 / qDet * (q.det(0, 2, 3, 1, 5, 6, 2, 7, 8));\r\n            pointResult.z = -1 / qDet * (q.det(0, 1, 3, 1, 4, 6, 2, 5, 8));\r\n            error = this.vertexError(q, pointResult);\r\n        }\r\n        else {\r\n            var p3 = (vertex1.position.add(vertex2.position)).divide(new Vector3(2, 2, 2));\r\n            //var norm3 = (vertex1.normal.add(vertex2.normal)).divide(new Vector3(2, 2, 2)).normalize();\r\n            var error1 = this.vertexError(q, vertex1.position);\r\n            var error2 = this.vertexError(q, vertex2.position);\r\n            var error3 = this.vertexError(q, p3);\r\n            error = Math.min(error1, error2, error3);\r\n            if (error === error1) {\r\n                if (pointResult) {\r\n                    pointResult.copyFrom(vertex1.position);\r\n                }\r\n            }\r\n            else if (error === error2) {\r\n                if (pointResult) {\r\n                    pointResult.copyFrom(vertex2.position);\r\n                }\r\n            }\r\n            else {\r\n                if (pointResult) {\r\n                    pointResult.copyFrom(p3);\r\n                }\r\n            }\r\n        }\r\n        return error;\r\n    };\r\n    return QuadraticErrorSimplification;\r\n}());\r\nexport { QuadraticErrorSimplification };\r\n"]},"metadata":{},"sourceType":"module"}