{"ast":null,"code":"import { WorkerPool } from './workerPool';\n/**\r\n * Class for loading KTX2 files\r\n */\n\nvar KhronosTextureContainer2 =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   * @param engine The engine to use\r\n   * @param numWorkers The number of workers for async operations. Specify `0` to disable web workers and run synchronously in the current context.\r\n   */\n  function KhronosTextureContainer2(engine, numWorkers) {\n    if (numWorkers === void 0) {\n      numWorkers = KhronosTextureContainer2.DefaultNumWorkers;\n    }\n\n    this._engine = engine;\n\n    if (!KhronosTextureContainer2._Initialized) {\n      KhronosTextureContainer2._CreateWorkerPool(numWorkers);\n    }\n  }\n\n  KhronosTextureContainer2.GetDefaultNumWorkers = function () {\n    if (typeof navigator !== \"object\" || !navigator.hardwareConcurrency) {\n      return 1;\n    } // Use 50% of the available logical processors but capped at 4.\n\n\n    return Math.min(Math.floor(navigator.hardwareConcurrency * 0.5), 4);\n  };\n\n  KhronosTextureContainer2._CreateWorkerPool = function (numWorkers) {\n    this._Initialized = true;\n\n    if (numWorkers && typeof Worker === \"function\") {\n      KhronosTextureContainer2._WorkerPoolPromise = new Promise(function (resolve) {\n        var workerContent = \"(\" + workerFunc + \")()\";\n        var workerBlobUrl = URL.createObjectURL(new Blob([workerContent], {\n          type: \"application/javascript\"\n        }));\n        var workerPromises = new Array(numWorkers);\n\n        for (var i = 0; i < workerPromises.length; i++) {\n          workerPromises[i] = new Promise(function (resolve, reject) {\n            var worker = new Worker(workerBlobUrl);\n\n            var onError = function (error) {\n              worker.removeEventListener(\"error\", onError);\n              worker.removeEventListener(\"message\", onMessage);\n              reject(error);\n            };\n\n            var onMessage = function (message) {\n              if (message.data.action === \"init\") {\n                worker.removeEventListener(\"error\", onError);\n                worker.removeEventListener(\"message\", onMessage);\n                resolve(worker);\n              }\n            };\n\n            worker.addEventListener(\"error\", onError);\n            worker.addEventListener(\"message\", onMessage);\n            worker.postMessage({\n              action: \"init\",\n              urls: KhronosTextureContainer2.URLConfig\n            });\n          });\n        }\n\n        Promise.all(workerPromises).then(function (workers) {\n          resolve(new WorkerPool(workers));\n        });\n      });\n    } else {\n      KTX2DECODER.MSCTranscoder.UseFromWorkerThread = false;\n      KTX2DECODER.WASMMemoryManager.LoadBinariesFromCurrentThread = true;\n    }\n  };\n  /** @hidden */\n\n\n  KhronosTextureContainer2.prototype.uploadAsync = function (data, internalTexture, options) {\n    var _this = this;\n\n    var caps = this._engine.getCaps();\n\n    var compressedTexturesCaps = {\n      astc: !!caps.astc,\n      bptc: !!caps.bptc,\n      s3tc: !!caps.s3tc,\n      pvrtc: !!caps.pvrtc,\n      etc2: !!caps.etc2,\n      etc1: !!caps.etc1\n    };\n\n    if (KhronosTextureContainer2._WorkerPoolPromise) {\n      return KhronosTextureContainer2._WorkerPoolPromise.then(function (workerPool) {\n        return new Promise(function (resolve, reject) {\n          workerPool.push(function (worker, onComplete) {\n            var onError = function (error) {\n              worker.removeEventListener(\"error\", onError);\n              worker.removeEventListener(\"message\", onMessage);\n              reject(error);\n              onComplete();\n            };\n\n            var onMessage = function (message) {\n              if (message.data.action === \"decoded\") {\n                worker.removeEventListener(\"error\", onError);\n                worker.removeEventListener(\"message\", onMessage);\n\n                if (!message.data.success) {\n                  reject({\n                    message: message.data.msg\n                  });\n                } else {\n                  try {\n                    _this._createTexture(message.data.decodedData, internalTexture, options);\n\n                    resolve();\n                  } catch (err) {\n                    reject({\n                      message: err\n                    });\n                  }\n                }\n\n                onComplete();\n              }\n            };\n\n            worker.addEventListener(\"error\", onError);\n            worker.addEventListener(\"message\", onMessage); // note: we can't transfer the ownership of data.buffer because if using a fallback texture the data.buffer buffer will be used by the current thread\n\n            worker.postMessage({\n              action: \"decode\",\n              data: data,\n              caps: compressedTexturesCaps,\n              options: options\n            }\n            /*, [data.buffer]*/\n            );\n          });\n        });\n      });\n    }\n\n    return new Promise(function (resolve, reject) {\n      if (!KhronosTextureContainer2._Ktx2Decoder) {\n        KhronosTextureContainer2._Ktx2Decoder = new KTX2DECODER.KTX2Decoder();\n      }\n\n      KhronosTextureContainer2._Ktx2Decoder.decode(data, caps).then(function (data) {\n        _this._createTexture(data, internalTexture);\n\n        resolve();\n      }).catch(function (reason) {\n        reject({\n          message: reason\n        });\n      });\n    });\n  };\n  /**\r\n   * Stop all async operations and release resources.\r\n   */\n\n\n  KhronosTextureContainer2.prototype.dispose = function () {\n    if (KhronosTextureContainer2._WorkerPoolPromise) {\n      KhronosTextureContainer2._WorkerPoolPromise.then(function (workerPool) {\n        workerPool.dispose();\n      });\n    }\n\n    delete KhronosTextureContainer2._WorkerPoolPromise;\n  };\n\n  KhronosTextureContainer2.prototype._createTexture = function (data\n  /* IDecodedData */\n  , internalTexture, options) {\n    this._engine._bindTextureDirectly(this._engine._gl.TEXTURE_2D, internalTexture);\n\n    if (options) {\n      // return back some information about the decoded data\n      options.transcodedFormat = data.transcodedFormat;\n      options.isInGammaSpace = data.isInGammaSpace;\n      options.transcoderName = data.transcoderName;\n    }\n\n    if (data.transcodedFormat === 0x8058\n    /* RGBA8 */\n    ) {\n      internalTexture.type = 0;\n      internalTexture.format = 5;\n    } else {\n      internalTexture.format = data.transcodedFormat;\n    }\n\n    internalTexture._gammaSpace = data.isInGammaSpace;\n\n    if (data.errors) {\n      throw new Error(\"KTX2 container - could not transcode the data. \" + data.errors);\n    }\n\n    for (var t = 0; t < data.mipmaps.length; ++t) {\n      var mipmap = data.mipmaps[t];\n\n      if (!mipmap || !mipmap.data) {\n        throw new Error(\"KTX2 container - could not transcode one of the image\");\n      }\n\n      if (data.transcodedFormat === 0x8058\n      /* RGBA8 */\n      ) {\n        // uncompressed RGBA\n        internalTexture.width = mipmap.width; // need to set width/height so that the call to _uploadDataToTextureDirectly uses the right dimensions\n\n        internalTexture.height = mipmap.height;\n\n        this._engine._uploadDataToTextureDirectly(internalTexture, mipmap.data, 0, t, undefined, true);\n      } else {\n        this._engine._uploadCompressedDataToTextureDirectly(internalTexture, data.transcodedFormat, mipmap.width, mipmap.height, mipmap.data, 0, t);\n      }\n    }\n\n    internalTexture.width = data.mipmaps[0].width;\n    internalTexture.height = data.mipmaps[0].height;\n    internalTexture.generateMipMaps = data.mipmaps.length > 1;\n    internalTexture.isReady = true;\n\n    this._engine._bindTextureDirectly(this._engine._gl.TEXTURE_2D, null);\n  };\n  /**\r\n   * Checks if the given data starts with a KTX2 file identifier.\r\n   * @param data the data to check\r\n   * @returns true if the data is a KTX2 file or false otherwise\r\n   */\n\n\n  KhronosTextureContainer2.IsValid = function (data) {\n    if (data.byteLength >= 12) {\n      // '«', 'K', 'T', 'X', ' ', '2', '0', '»', '\\r', '\\n', '\\x1A', '\\n'\n      var identifier = new Uint8Array(data.buffer, data.byteOffset, 12);\n\n      if (identifier[0] === 0xAB && identifier[1] === 0x4B && identifier[2] === 0x54 && identifier[3] === 0x58 && identifier[4] === 0x20 && identifier[5] === 0x32 && identifier[6] === 0x30 && identifier[7] === 0xBB && identifier[8] === 0x0D && identifier[9] === 0x0A && identifier[10] === 0x1A && identifier[11] === 0x0A) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * URLs to use when loading the KTX2 decoder module as well as its dependencies\r\n   * If a url is null, the default url is used (pointing to https://preview.babylonjs.com)\r\n   * Note that jsDecoderModule can't be null and that the other dependencies will only be loaded if necessary\r\n   * Urls you can change:\r\n   *     URLConfig.jsDecoderModule\r\n   *     URLConfig.wasmUASTCToASTC\r\n   *     URLConfig.wasmUASTCToBC7\r\n   *     URLConfig.wasmUASTCToRGBA_UNORM\r\n   *     URLConfig.wasmUASTCToRGBA_SRGB\r\n   *     URLConfig.jsMSCTranscoder\r\n   *     URLConfig.wasmMSCTranscoder\r\n   * You can see their default values in this PG: https://playground.babylonjs.com/#EIJH8L#9\r\n   */\n\n\n  KhronosTextureContainer2.URLConfig = {\n    jsDecoderModule: \"https://preview.babylonjs.com/babylon.ktx2Decoder.js\",\n    wasmUASTCToASTC: null,\n    wasmUASTCToBC7: null,\n    wasmUASTCToRGBA_UNORM: null,\n    wasmUASTCToRGBA_SRGB: null,\n    jsMSCTranscoder: null,\n    wasmMSCTranscoder: null\n  };\n  /**\r\n   * Default number of workers used to handle data decoding\r\n   */\n\n  KhronosTextureContainer2.DefaultNumWorkers = KhronosTextureContainer2.GetDefaultNumWorkers();\n  return KhronosTextureContainer2;\n}();\n\nexport { KhronosTextureContainer2 };\n\nfunction workerFunc() {\n  var ktx2Decoder;\n\n  onmessage = function (event) {\n    switch (event.data.action) {\n      case \"init\":\n        var urls = event.data.urls;\n        importScripts(urls.jsDecoderModule);\n\n        if (urls.wasmUASTCToASTC !== null) {\n          KTX2DECODER.LiteTranscoder_UASTC_ASTC.WasmModuleURL = urls.wasmUASTCToASTC;\n        }\n\n        if (urls.wasmUASTCToBC7 !== null) {\n          KTX2DECODER.LiteTranscoder_UASTC_BC7.WasmModuleURL = urls.wasmUASTCToBC7;\n        }\n\n        if (urls.wasmUASTCToRGBA_UNORM !== null) {\n          KTX2DECODER.LiteTranscoder_UASTC_RGBA_UNORM.WasmModuleURL = urls.wasmUASTCToRGBA_UNORM;\n        }\n\n        if (urls.wasmUASTCToRGBA_SRGB !== null) {\n          KTX2DECODER.LiteTranscoder_UASTC_RGBA_SRGB.WasmModuleURL = urls.wasmUASTCToRGBA_SRGB;\n        }\n\n        if (urls.jsMSCTranscoder !== null) {\n          KTX2DECODER.MSCTranscoder.JSModuleURL = urls.jsMSCTranscoder;\n        }\n\n        if (urls.wasmMSCTranscoder !== null) {\n          KTX2DECODER.MSCTranscoder.WasmModuleURL = urls.wasmMSCTranscoder;\n        }\n\n        ktx2Decoder = new KTX2DECODER.KTX2Decoder();\n        postMessage({\n          action: \"init\"\n        });\n        break;\n\n      case \"decode\":\n        ktx2Decoder.decode(event.data.data, event.data.caps, event.data.options).then(function (data) {\n          var buffers = [];\n\n          for (var mip = 0; mip < data.mipmaps.length; ++mip) {\n            var mipmap = data.mipmaps[mip];\n\n            if (mipmap && mipmap.data) {\n              buffers.push(mipmap.data.buffer);\n            }\n          }\n\n          postMessage({\n            action: \"decoded\",\n            success: true,\n            decodedData: data\n          }, buffers);\n        }).catch(function (reason) {\n          postMessage({\n            action: \"decoded\",\n            success: false,\n            msg: reason\n          });\n        });\n        break;\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/rober/Documents/Computer Science/Side Projects/arcade/node_modules/@babylonjs/core/Misc/khronosTextureContainer2.js"],"names":["WorkerPool","KhronosTextureContainer2","engine","numWorkers","DefaultNumWorkers","_engine","_Initialized","_CreateWorkerPool","GetDefaultNumWorkers","navigator","hardwareConcurrency","Math","min","floor","Worker","_WorkerPoolPromise","Promise","resolve","workerContent","workerFunc","workerBlobUrl","URL","createObjectURL","Blob","type","workerPromises","Array","i","length","reject","worker","onError","error","removeEventListener","onMessage","message","data","action","addEventListener","postMessage","urls","URLConfig","all","then","workers","KTX2DECODER","MSCTranscoder","UseFromWorkerThread","WASMMemoryManager","LoadBinariesFromCurrentThread","prototype","uploadAsync","internalTexture","options","_this","caps","getCaps","compressedTexturesCaps","astc","bptc","s3tc","pvrtc","etc2","etc1","workerPool","push","onComplete","success","msg","_createTexture","decodedData","err","_Ktx2Decoder","KTX2Decoder","decode","catch","reason","dispose","_bindTextureDirectly","_gl","TEXTURE_2D","transcodedFormat","isInGammaSpace","transcoderName","format","_gammaSpace","errors","Error","t","mipmaps","mipmap","width","height","_uploadDataToTextureDirectly","undefined","_uploadCompressedDataToTextureDirectly","generateMipMaps","isReady","IsValid","byteLength","identifier","Uint8Array","buffer","byteOffset","jsDecoderModule","wasmUASTCToASTC","wasmUASTCToBC7","wasmUASTCToRGBA_UNORM","wasmUASTCToRGBA_SRGB","jsMSCTranscoder","wasmMSCTranscoder","ktx2Decoder","onmessage","event","importScripts","LiteTranscoder_UASTC_ASTC","WasmModuleURL","LiteTranscoder_UASTC_BC7","LiteTranscoder_UASTC_RGBA_UNORM","LiteTranscoder_UASTC_RGBA_SRGB","JSModuleURL","buffers","mip"],"mappings":"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","sourcesContent":["import { WorkerPool } from './workerPool';\r\n/**\r\n * Class for loading KTX2 files\r\n */\r\nvar KhronosTextureContainer2 = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     * @param engine The engine to use\r\n     * @param numWorkers The number of workers for async operations. Specify `0` to disable web workers and run synchronously in the current context.\r\n     */\r\n    function KhronosTextureContainer2(engine, numWorkers) {\r\n        if (numWorkers === void 0) { numWorkers = KhronosTextureContainer2.DefaultNumWorkers; }\r\n        this._engine = engine;\r\n        if (!KhronosTextureContainer2._Initialized) {\r\n            KhronosTextureContainer2._CreateWorkerPool(numWorkers);\r\n        }\r\n    }\r\n    KhronosTextureContainer2.GetDefaultNumWorkers = function () {\r\n        if (typeof navigator !== \"object\" || !navigator.hardwareConcurrency) {\r\n            return 1;\r\n        }\r\n        // Use 50% of the available logical processors but capped at 4.\r\n        return Math.min(Math.floor(navigator.hardwareConcurrency * 0.5), 4);\r\n    };\r\n    KhronosTextureContainer2._CreateWorkerPool = function (numWorkers) {\r\n        this._Initialized = true;\r\n        if (numWorkers && typeof Worker === \"function\") {\r\n            KhronosTextureContainer2._WorkerPoolPromise = new Promise(function (resolve) {\r\n                var workerContent = \"(\" + workerFunc + \")()\";\r\n                var workerBlobUrl = URL.createObjectURL(new Blob([workerContent], { type: \"application/javascript\" }));\r\n                var workerPromises = new Array(numWorkers);\r\n                for (var i = 0; i < workerPromises.length; i++) {\r\n                    workerPromises[i] = new Promise(function (resolve, reject) {\r\n                        var worker = new Worker(workerBlobUrl);\r\n                        var onError = function (error) {\r\n                            worker.removeEventListener(\"error\", onError);\r\n                            worker.removeEventListener(\"message\", onMessage);\r\n                            reject(error);\r\n                        };\r\n                        var onMessage = function (message) {\r\n                            if (message.data.action === \"init\") {\r\n                                worker.removeEventListener(\"error\", onError);\r\n                                worker.removeEventListener(\"message\", onMessage);\r\n                                resolve(worker);\r\n                            }\r\n                        };\r\n                        worker.addEventListener(\"error\", onError);\r\n                        worker.addEventListener(\"message\", onMessage);\r\n                        worker.postMessage({\r\n                            action: \"init\",\r\n                            urls: KhronosTextureContainer2.URLConfig\r\n                        });\r\n                    });\r\n                }\r\n                Promise.all(workerPromises).then(function (workers) {\r\n                    resolve(new WorkerPool(workers));\r\n                });\r\n            });\r\n        }\r\n        else {\r\n            KTX2DECODER.MSCTranscoder.UseFromWorkerThread = false;\r\n            KTX2DECODER.WASMMemoryManager.LoadBinariesFromCurrentThread = true;\r\n        }\r\n    };\r\n    /** @hidden */\r\n    KhronosTextureContainer2.prototype.uploadAsync = function (data, internalTexture, options) {\r\n        var _this = this;\r\n        var caps = this._engine.getCaps();\r\n        var compressedTexturesCaps = {\r\n            astc: !!caps.astc,\r\n            bptc: !!caps.bptc,\r\n            s3tc: !!caps.s3tc,\r\n            pvrtc: !!caps.pvrtc,\r\n            etc2: !!caps.etc2,\r\n            etc1: !!caps.etc1,\r\n        };\r\n        if (KhronosTextureContainer2._WorkerPoolPromise) {\r\n            return KhronosTextureContainer2._WorkerPoolPromise.then(function (workerPool) {\r\n                return new Promise(function (resolve, reject) {\r\n                    workerPool.push(function (worker, onComplete) {\r\n                        var onError = function (error) {\r\n                            worker.removeEventListener(\"error\", onError);\r\n                            worker.removeEventListener(\"message\", onMessage);\r\n                            reject(error);\r\n                            onComplete();\r\n                        };\r\n                        var onMessage = function (message) {\r\n                            if (message.data.action === \"decoded\") {\r\n                                worker.removeEventListener(\"error\", onError);\r\n                                worker.removeEventListener(\"message\", onMessage);\r\n                                if (!message.data.success) {\r\n                                    reject({ message: message.data.msg });\r\n                                }\r\n                                else {\r\n                                    try {\r\n                                        _this._createTexture(message.data.decodedData, internalTexture, options);\r\n                                        resolve();\r\n                                    }\r\n                                    catch (err) {\r\n                                        reject({ message: err });\r\n                                    }\r\n                                }\r\n                                onComplete();\r\n                            }\r\n                        };\r\n                        worker.addEventListener(\"error\", onError);\r\n                        worker.addEventListener(\"message\", onMessage);\r\n                        // note: we can't transfer the ownership of data.buffer because if using a fallback texture the data.buffer buffer will be used by the current thread\r\n                        worker.postMessage({ action: \"decode\", data: data, caps: compressedTexturesCaps, options: options } /*, [data.buffer]*/);\r\n                    });\r\n                });\r\n            });\r\n        }\r\n        return new Promise(function (resolve, reject) {\r\n            if (!KhronosTextureContainer2._Ktx2Decoder) {\r\n                KhronosTextureContainer2._Ktx2Decoder = new KTX2DECODER.KTX2Decoder();\r\n            }\r\n            KhronosTextureContainer2._Ktx2Decoder.decode(data, caps).then(function (data) {\r\n                _this._createTexture(data, internalTexture);\r\n                resolve();\r\n            }).catch(function (reason) {\r\n                reject({ message: reason });\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Stop all async operations and release resources.\r\n     */\r\n    KhronosTextureContainer2.prototype.dispose = function () {\r\n        if (KhronosTextureContainer2._WorkerPoolPromise) {\r\n            KhronosTextureContainer2._WorkerPoolPromise.then(function (workerPool) {\r\n                workerPool.dispose();\r\n            });\r\n        }\r\n        delete KhronosTextureContainer2._WorkerPoolPromise;\r\n    };\r\n    KhronosTextureContainer2.prototype._createTexture = function (data /* IDecodedData */, internalTexture, options) {\r\n        this._engine._bindTextureDirectly(this._engine._gl.TEXTURE_2D, internalTexture);\r\n        if (options) {\r\n            // return back some information about the decoded data\r\n            options.transcodedFormat = data.transcodedFormat;\r\n            options.isInGammaSpace = data.isInGammaSpace;\r\n            options.transcoderName = data.transcoderName;\r\n        }\r\n        if (data.transcodedFormat === 0x8058 /* RGBA8 */) {\r\n            internalTexture.type = 0;\r\n            internalTexture.format = 5;\r\n        }\r\n        else {\r\n            internalTexture.format = data.transcodedFormat;\r\n        }\r\n        internalTexture._gammaSpace = data.isInGammaSpace;\r\n        if (data.errors) {\r\n            throw new Error(\"KTX2 container - could not transcode the data. \" + data.errors);\r\n        }\r\n        for (var t = 0; t < data.mipmaps.length; ++t) {\r\n            var mipmap = data.mipmaps[t];\r\n            if (!mipmap || !mipmap.data) {\r\n                throw new Error(\"KTX2 container - could not transcode one of the image\");\r\n            }\r\n            if (data.transcodedFormat === 0x8058 /* RGBA8 */) {\r\n                // uncompressed RGBA\r\n                internalTexture.width = mipmap.width; // need to set width/height so that the call to _uploadDataToTextureDirectly uses the right dimensions\r\n                internalTexture.height = mipmap.height;\r\n                this._engine._uploadDataToTextureDirectly(internalTexture, mipmap.data, 0, t, undefined, true);\r\n            }\r\n            else {\r\n                this._engine._uploadCompressedDataToTextureDirectly(internalTexture, data.transcodedFormat, mipmap.width, mipmap.height, mipmap.data, 0, t);\r\n            }\r\n        }\r\n        internalTexture.width = data.mipmaps[0].width;\r\n        internalTexture.height = data.mipmaps[0].height;\r\n        internalTexture.generateMipMaps = data.mipmaps.length > 1;\r\n        internalTexture.isReady = true;\r\n        this._engine._bindTextureDirectly(this._engine._gl.TEXTURE_2D, null);\r\n    };\r\n    /**\r\n     * Checks if the given data starts with a KTX2 file identifier.\r\n     * @param data the data to check\r\n     * @returns true if the data is a KTX2 file or false otherwise\r\n     */\r\n    KhronosTextureContainer2.IsValid = function (data) {\r\n        if (data.byteLength >= 12) {\r\n            // '«', 'K', 'T', 'X', ' ', '2', '0', '»', '\\r', '\\n', '\\x1A', '\\n'\r\n            var identifier = new Uint8Array(data.buffer, data.byteOffset, 12);\r\n            if (identifier[0] === 0xAB && identifier[1] === 0x4B && identifier[2] === 0x54 && identifier[3] === 0x58 && identifier[4] === 0x20 && identifier[5] === 0x32 &&\r\n                identifier[6] === 0x30 && identifier[7] === 0xBB && identifier[8] === 0x0D && identifier[9] === 0x0A && identifier[10] === 0x1A && identifier[11] === 0x0A) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * URLs to use when loading the KTX2 decoder module as well as its dependencies\r\n     * If a url is null, the default url is used (pointing to https://preview.babylonjs.com)\r\n     * Note that jsDecoderModule can't be null and that the other dependencies will only be loaded if necessary\r\n     * Urls you can change:\r\n     *     URLConfig.jsDecoderModule\r\n     *     URLConfig.wasmUASTCToASTC\r\n     *     URLConfig.wasmUASTCToBC7\r\n     *     URLConfig.wasmUASTCToRGBA_UNORM\r\n     *     URLConfig.wasmUASTCToRGBA_SRGB\r\n     *     URLConfig.jsMSCTranscoder\r\n     *     URLConfig.wasmMSCTranscoder\r\n     * You can see their default values in this PG: https://playground.babylonjs.com/#EIJH8L#9\r\n     */\r\n    KhronosTextureContainer2.URLConfig = {\r\n        jsDecoderModule: \"https://preview.babylonjs.com/babylon.ktx2Decoder.js\",\r\n        wasmUASTCToASTC: null,\r\n        wasmUASTCToBC7: null,\r\n        wasmUASTCToRGBA_UNORM: null,\r\n        wasmUASTCToRGBA_SRGB: null,\r\n        jsMSCTranscoder: null,\r\n        wasmMSCTranscoder: null,\r\n    };\r\n    /**\r\n     * Default number of workers used to handle data decoding\r\n     */\r\n    KhronosTextureContainer2.DefaultNumWorkers = KhronosTextureContainer2.GetDefaultNumWorkers();\r\n    return KhronosTextureContainer2;\r\n}());\r\nexport { KhronosTextureContainer2 };\r\nfunction workerFunc() {\r\n    var ktx2Decoder;\r\n    onmessage = function (event) {\r\n        switch (event.data.action) {\r\n            case \"init\":\r\n                var urls = event.data.urls;\r\n                importScripts(urls.jsDecoderModule);\r\n                if (urls.wasmUASTCToASTC !== null) {\r\n                    KTX2DECODER.LiteTranscoder_UASTC_ASTC.WasmModuleURL = urls.wasmUASTCToASTC;\r\n                }\r\n                if (urls.wasmUASTCToBC7 !== null) {\r\n                    KTX2DECODER.LiteTranscoder_UASTC_BC7.WasmModuleURL = urls.wasmUASTCToBC7;\r\n                }\r\n                if (urls.wasmUASTCToRGBA_UNORM !== null) {\r\n                    KTX2DECODER.LiteTranscoder_UASTC_RGBA_UNORM.WasmModuleURL = urls.wasmUASTCToRGBA_UNORM;\r\n                }\r\n                if (urls.wasmUASTCToRGBA_SRGB !== null) {\r\n                    KTX2DECODER.LiteTranscoder_UASTC_RGBA_SRGB.WasmModuleURL = urls.wasmUASTCToRGBA_SRGB;\r\n                }\r\n                if (urls.jsMSCTranscoder !== null) {\r\n                    KTX2DECODER.MSCTranscoder.JSModuleURL = urls.jsMSCTranscoder;\r\n                }\r\n                if (urls.wasmMSCTranscoder !== null) {\r\n                    KTX2DECODER.MSCTranscoder.WasmModuleURL = urls.wasmMSCTranscoder;\r\n                }\r\n                ktx2Decoder = new KTX2DECODER.KTX2Decoder();\r\n                postMessage({ action: \"init\" });\r\n                break;\r\n            case \"decode\":\r\n                ktx2Decoder.decode(event.data.data, event.data.caps, event.data.options).then(function (data) {\r\n                    var buffers = [];\r\n                    for (var mip = 0; mip < data.mipmaps.length; ++mip) {\r\n                        var mipmap = data.mipmaps[mip];\r\n                        if (mipmap && mipmap.data) {\r\n                            buffers.push(mipmap.data.buffer);\r\n                        }\r\n                    }\r\n                    postMessage({ action: \"decoded\", success: true, decodedData: data }, buffers);\r\n                }).catch(function (reason) {\r\n                    postMessage({ action: \"decoded\", success: false, msg: reason });\r\n                });\r\n                break;\r\n        }\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}