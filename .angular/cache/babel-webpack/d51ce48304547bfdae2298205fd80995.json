{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { WebXRFeaturesManager, WebXRFeatureName } from \"../webXRFeaturesManager\";\nimport { Observable } from \"../../Misc/observable\";\nimport { Vector3, Matrix } from \"../../Maths/math.vector\";\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature\";\nimport { Tools } from \"../../Misc/tools\";\n/**\r\n * The currently-working hit-test module.\r\n * Hit test (or Ray-casting) is used to interact with the real world.\r\n * For further information read here - https://github.com/immersive-web/hit-test\r\n */\n\nvar WebXRHitTestLegacy =\n/** @class */\nfunction (_super) {\n  __extends(WebXRHitTestLegacy, _super);\n  /**\r\n   * Creates a new instance of the (legacy version) hit test feature\r\n   * @param _xrSessionManager an instance of WebXRSessionManager\r\n   * @param options options to use when constructing this feature\r\n   */\n\n\n  function WebXRHitTestLegacy(_xrSessionManager,\n  /**\r\n   * options to use when constructing this feature\r\n   */\n  options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, _xrSessionManager) || this;\n\n    _this.options = options; // in XR space z-forward is negative\n\n    _this._direction = new Vector3(0, 0, -1);\n    _this._mat = new Matrix();\n    _this._onSelectEnabled = false;\n    _this._origin = new Vector3(0, 0, 0);\n    /**\r\n     * Populated with the last native XR Hit Results\r\n     */\n\n    _this.lastNativeXRHitResults = [];\n    /**\r\n     * Triggered when new babylon (transformed) hit test results are available\r\n     */\n\n    _this.onHitTestResultObservable = new Observable();\n\n    _this._onHitTestResults = function (xrResults) {\n      var mats = xrResults.map(function (result) {\n        var mat = Matrix.FromArray(result.hitMatrix);\n\n        if (!_this._xrSessionManager.scene.useRightHandedSystem) {\n          mat.toggleModelMatrixHandInPlace();\n        } // if (this.options.coordinatesSpace === Space.WORLD) {\n\n\n        if (_this.options.worldParentNode) {\n          mat.multiplyToRef(_this.options.worldParentNode.getWorldMatrix(), mat);\n        }\n\n        return {\n          xrHitResult: result,\n          transformationMatrix: mat\n        };\n      });\n      _this.lastNativeXRHitResults = xrResults;\n\n      _this.onHitTestResultObservable.notifyObservers(mats);\n    }; // can be done using pointerdown event, and xrSessionManager.currentFrame\n\n\n    _this._onSelect = function (event) {\n      if (!_this._onSelectEnabled) {\n        return;\n      }\n\n      WebXRHitTestLegacy.XRHitTestWithSelectEvent(event, _this._xrSessionManager.referenceSpace);\n    };\n\n    _this.xrNativeFeatureName = \"hit-test\";\n    Tools.Warn(\"A newer version of this plugin is available\");\n    return _this;\n  }\n  /**\r\n   * execute a hit test with an XR Ray\r\n   *\r\n   * @param xrSession a native xrSession that will execute this hit test\r\n   * @param xrRay the ray (position and direction) to use for ray-casting\r\n   * @param referenceSpace native XR reference space to use for the hit-test\r\n   * @param filter filter function that will filter the results\r\n   * @returns a promise that resolves with an array of native XR hit result in xr coordinates system\r\n   */\n\n\n  WebXRHitTestLegacy.XRHitTestWithRay = function (xrSession, xrRay, referenceSpace, filter) {\n    return xrSession.requestHitTest(xrRay, referenceSpace).then(function (results) {\n      var filterFunction = filter || function (result) {\n        return !!result.hitMatrix;\n      };\n\n      return results.filter(filterFunction);\n    });\n  };\n  /**\r\n   * Execute a hit test on the current running session using a select event returned from a transient input (such as touch)\r\n   * @param event the (select) event to use to select with\r\n   * @param referenceSpace the reference space to use for this hit test\r\n   * @returns a promise that resolves with an array of native XR hit result in xr coordinates system\r\n   */\n\n\n  WebXRHitTestLegacy.XRHitTestWithSelectEvent = function (event, referenceSpace) {\n    var targetRayPose = event.frame.getPose(event.inputSource.targetRaySpace, referenceSpace);\n\n    if (!targetRayPose) {\n      return Promise.resolve([]);\n    }\n\n    var targetRay = new XRRay(targetRayPose.transform);\n    return this.XRHitTestWithRay(event.frame.session, targetRay, referenceSpace);\n  };\n  /**\r\n   * attach this feature\r\n   * Will usually be called by the features manager\r\n   *\r\n   * @returns true if successful.\r\n   */\n\n\n  WebXRHitTestLegacy.prototype.attach = function () {\n    if (!_super.prototype.attach.call(this)) {\n      return false;\n    }\n\n    if (this.options.testOnPointerDownOnly) {\n      this._xrSessionManager.session.addEventListener(\"select\", this._onSelect, false);\n    }\n\n    return true;\n  };\n  /**\r\n   * detach this feature.\r\n   * Will usually be called by the features manager\r\n   *\r\n   * @returns true if successful.\r\n   */\n\n\n  WebXRHitTestLegacy.prototype.detach = function () {\n    if (!_super.prototype.detach.call(this)) {\n      return false;\n    } // disable select\n\n\n    this._onSelectEnabled = false;\n\n    this._xrSessionManager.session.removeEventListener(\"select\", this._onSelect);\n\n    return true;\n  };\n  /**\r\n   * Dispose this feature and all of the resources attached\r\n   */\n\n\n  WebXRHitTestLegacy.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.onHitTestResultObservable.clear();\n  };\n\n  WebXRHitTestLegacy.prototype._onXRFrame = function (frame) {\n    // make sure we do nothing if (async) not attached\n    if (!this.attached || this.options.testOnPointerDownOnly) {\n      return;\n    }\n\n    var pose = frame.getViewerPose(this._xrSessionManager.referenceSpace);\n\n    if (!pose) {\n      return;\n    }\n\n    Matrix.FromArrayToRef(pose.transform.matrix, 0, this._mat);\n    Vector3.TransformCoordinatesFromFloatsToRef(0, 0, 0, this._mat, this._origin);\n    Vector3.TransformCoordinatesFromFloatsToRef(0, 0, -1, this._mat, this._direction);\n\n    this._direction.subtractInPlace(this._origin);\n\n    this._direction.normalize();\n\n    var ray = new XRRay({\n      x: this._origin.x,\n      y: this._origin.y,\n      z: this._origin.z,\n      w: 0\n    }, {\n      x: this._direction.x,\n      y: this._direction.y,\n      z: this._direction.z,\n      w: 0\n    });\n    WebXRHitTestLegacy.XRHitTestWithRay(this._xrSessionManager.session, ray, this._xrSessionManager.referenceSpace).then(this._onHitTestResults);\n  };\n  /**\r\n   * The module's name\r\n   */\n\n\n  WebXRHitTestLegacy.Name = WebXRFeatureName.HIT_TEST;\n  /**\r\n   * The (Babylon) version of this module.\r\n   * This is an integer representing the implementation version.\r\n   * This number does not correspond to the WebXR specs version\r\n   */\n\n  WebXRHitTestLegacy.Version = 1;\n  return WebXRHitTestLegacy;\n}(WebXRAbstractFeature);\n\nexport { WebXRHitTestLegacy }; //register the plugin versions\n\nWebXRFeaturesManager.AddWebXRFeature(WebXRHitTestLegacy.Name, function (xrSessionManager, options) {\n  return function () {\n    return new WebXRHitTestLegacy(xrSessionManager, options);\n  };\n}, WebXRHitTestLegacy.Version, false);","map":{"version":3,"sources":["C:/Users/rober/Documents/Computer Science/Side Projects/arcade/node_modules/@babylonjs/core/XR/features/WebXRHitTestLegacy.js"],"names":["__extends","WebXRFeaturesManager","WebXRFeatureName","Observable","Vector3","Matrix","WebXRAbstractFeature","Tools","WebXRHitTestLegacy","_super","_xrSessionManager","options","_this","call","_direction","_mat","_onSelectEnabled","_origin","lastNativeXRHitResults","onHitTestResultObservable","_onHitTestResults","xrResults","mats","map","result","mat","FromArray","hitMatrix","scene","useRightHandedSystem","toggleModelMatrixHandInPlace","worldParentNode","multiplyToRef","getWorldMatrix","xrHitResult","transformationMatrix","notifyObservers","_onSelect","event","XRHitTestWithSelectEvent","referenceSpace","xrNativeFeatureName","Warn","XRHitTestWithRay","xrSession","xrRay","filter","requestHitTest","then","results","filterFunction","targetRayPose","frame","getPose","inputSource","targetRaySpace","Promise","resolve","targetRay","XRRay","transform","session","prototype","attach","testOnPointerDownOnly","addEventListener","detach","removeEventListener","dispose","clear","_onXRFrame","attached","pose","getViewerPose","FromArrayToRef","matrix","TransformCoordinatesFromFloatsToRef","subtractInPlace","normalize","ray","x","y","z","w","Name","HIT_TEST","Version","AddWebXRFeature","xrSessionManager"],"mappings":"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","sourcesContent":["import { __extends } from \"tslib\";\r\nimport { WebXRFeaturesManager, WebXRFeatureName } from \"../webXRFeaturesManager\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { Vector3, Matrix } from \"../../Maths/math.vector\";\r\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature\";\r\nimport { Tools } from \"../../Misc/tools\";\r\n/**\r\n * The currently-working hit-test module.\r\n * Hit test (or Ray-casting) is used to interact with the real world.\r\n * For further information read here - https://github.com/immersive-web/hit-test\r\n */\r\nvar WebXRHitTestLegacy = /** @class */ (function (_super) {\r\n    __extends(WebXRHitTestLegacy, _super);\r\n    /**\r\n     * Creates a new instance of the (legacy version) hit test feature\r\n     * @param _xrSessionManager an instance of WebXRSessionManager\r\n     * @param options options to use when constructing this feature\r\n     */\r\n    function WebXRHitTestLegacy(_xrSessionManager, \r\n    /**\r\n     * options to use when constructing this feature\r\n     */\r\n    options) {\r\n        if (options === void 0) { options = {}; }\r\n        var _this = _super.call(this, _xrSessionManager) || this;\r\n        _this.options = options;\r\n        // in XR space z-forward is negative\r\n        _this._direction = new Vector3(0, 0, -1);\r\n        _this._mat = new Matrix();\r\n        _this._onSelectEnabled = false;\r\n        _this._origin = new Vector3(0, 0, 0);\r\n        /**\r\n         * Populated with the last native XR Hit Results\r\n         */\r\n        _this.lastNativeXRHitResults = [];\r\n        /**\r\n         * Triggered when new babylon (transformed) hit test results are available\r\n         */\r\n        _this.onHitTestResultObservable = new Observable();\r\n        _this._onHitTestResults = function (xrResults) {\r\n            var mats = xrResults.map(function (result) {\r\n                var mat = Matrix.FromArray(result.hitMatrix);\r\n                if (!_this._xrSessionManager.scene.useRightHandedSystem) {\r\n                    mat.toggleModelMatrixHandInPlace();\r\n                }\r\n                // if (this.options.coordinatesSpace === Space.WORLD) {\r\n                if (_this.options.worldParentNode) {\r\n                    mat.multiplyToRef(_this.options.worldParentNode.getWorldMatrix(), mat);\r\n                }\r\n                return {\r\n                    xrHitResult: result,\r\n                    transformationMatrix: mat,\r\n                };\r\n            });\r\n            _this.lastNativeXRHitResults = xrResults;\r\n            _this.onHitTestResultObservable.notifyObservers(mats);\r\n        };\r\n        // can be done using pointerdown event, and xrSessionManager.currentFrame\r\n        _this._onSelect = function (event) {\r\n            if (!_this._onSelectEnabled) {\r\n                return;\r\n            }\r\n            WebXRHitTestLegacy.XRHitTestWithSelectEvent(event, _this._xrSessionManager.referenceSpace);\r\n        };\r\n        _this.xrNativeFeatureName = \"hit-test\";\r\n        Tools.Warn(\"A newer version of this plugin is available\");\r\n        return _this;\r\n    }\r\n    /**\r\n     * execute a hit test with an XR Ray\r\n     *\r\n     * @param xrSession a native xrSession that will execute this hit test\r\n     * @param xrRay the ray (position and direction) to use for ray-casting\r\n     * @param referenceSpace native XR reference space to use for the hit-test\r\n     * @param filter filter function that will filter the results\r\n     * @returns a promise that resolves with an array of native XR hit result in xr coordinates system\r\n     */\r\n    WebXRHitTestLegacy.XRHitTestWithRay = function (xrSession, xrRay, referenceSpace, filter) {\r\n        return xrSession.requestHitTest(xrRay, referenceSpace).then(function (results) {\r\n            var filterFunction = filter || (function (result) { return !!result.hitMatrix; });\r\n            return results.filter(filterFunction);\r\n        });\r\n    };\r\n    /**\r\n     * Execute a hit test on the current running session using a select event returned from a transient input (such as touch)\r\n     * @param event the (select) event to use to select with\r\n     * @param referenceSpace the reference space to use for this hit test\r\n     * @returns a promise that resolves with an array of native XR hit result in xr coordinates system\r\n     */\r\n    WebXRHitTestLegacy.XRHitTestWithSelectEvent = function (event, referenceSpace) {\r\n        var targetRayPose = event.frame.getPose(event.inputSource.targetRaySpace, referenceSpace);\r\n        if (!targetRayPose) {\r\n            return Promise.resolve([]);\r\n        }\r\n        var targetRay = new XRRay(targetRayPose.transform);\r\n        return this.XRHitTestWithRay(event.frame.session, targetRay, referenceSpace);\r\n    };\r\n    /**\r\n     * attach this feature\r\n     * Will usually be called by the features manager\r\n     *\r\n     * @returns true if successful.\r\n     */\r\n    WebXRHitTestLegacy.prototype.attach = function () {\r\n        if (!_super.prototype.attach.call(this)) {\r\n            return false;\r\n        }\r\n        if (this.options.testOnPointerDownOnly) {\r\n            this._xrSessionManager.session.addEventListener(\"select\", this._onSelect, false);\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * detach this feature.\r\n     * Will usually be called by the features manager\r\n     *\r\n     * @returns true if successful.\r\n     */\r\n    WebXRHitTestLegacy.prototype.detach = function () {\r\n        if (!_super.prototype.detach.call(this)) {\r\n            return false;\r\n        }\r\n        // disable select\r\n        this._onSelectEnabled = false;\r\n        this._xrSessionManager.session.removeEventListener(\"select\", this._onSelect);\r\n        return true;\r\n    };\r\n    /**\r\n     * Dispose this feature and all of the resources attached\r\n     */\r\n    WebXRHitTestLegacy.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n        this.onHitTestResultObservable.clear();\r\n    };\r\n    WebXRHitTestLegacy.prototype._onXRFrame = function (frame) {\r\n        // make sure we do nothing if (async) not attached\r\n        if (!this.attached || this.options.testOnPointerDownOnly) {\r\n            return;\r\n        }\r\n        var pose = frame.getViewerPose(this._xrSessionManager.referenceSpace);\r\n        if (!pose) {\r\n            return;\r\n        }\r\n        Matrix.FromArrayToRef(pose.transform.matrix, 0, this._mat);\r\n        Vector3.TransformCoordinatesFromFloatsToRef(0, 0, 0, this._mat, this._origin);\r\n        Vector3.TransformCoordinatesFromFloatsToRef(0, 0, -1, this._mat, this._direction);\r\n        this._direction.subtractInPlace(this._origin);\r\n        this._direction.normalize();\r\n        var ray = new XRRay({ x: this._origin.x, y: this._origin.y, z: this._origin.z, w: 0 }, { x: this._direction.x, y: this._direction.y, z: this._direction.z, w: 0 });\r\n        WebXRHitTestLegacy.XRHitTestWithRay(this._xrSessionManager.session, ray, this._xrSessionManager.referenceSpace).then(this._onHitTestResults);\r\n    };\r\n    /**\r\n     * The module's name\r\n     */\r\n    WebXRHitTestLegacy.Name = WebXRFeatureName.HIT_TEST;\r\n    /**\r\n     * The (Babylon) version of this module.\r\n     * This is an integer representing the implementation version.\r\n     * This number does not correspond to the WebXR specs version\r\n     */\r\n    WebXRHitTestLegacy.Version = 1;\r\n    return WebXRHitTestLegacy;\r\n}(WebXRAbstractFeature));\r\nexport { WebXRHitTestLegacy };\r\n//register the plugin versions\r\nWebXRFeaturesManager.AddWebXRFeature(WebXRHitTestLegacy.Name, function (xrSessionManager, options) {\r\n    return function () { return new WebXRHitTestLegacy(xrSessionManager, options); };\r\n}, WebXRHitTestLegacy.Version, false);\r\n"]},"metadata":{},"sourceType":"module"}