{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { WebXRFeaturesManager, WebXRFeatureName } from \"../webXRFeaturesManager\";\nimport { Observable } from \"../../Misc/observable\";\nimport { Vector3, Matrix, Quaternion } from \"../../Maths/math.vector\";\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature\";\nimport { Tools } from \"../../Misc/tools\";\n/**\r\n * The currently-working hit-test module.\r\n * Hit test (or Ray-casting) is used to interact with the real world.\r\n * For further information read here - https://github.com/immersive-web/hit-test\r\n *\r\n * Tested on chrome (mobile) 80.\r\n */\n\nvar WebXRHitTest =\n/** @class */\nfunction (_super) {\n  __extends(WebXRHitTest, _super);\n  /**\r\n   * Creates a new instance of the hit test feature\r\n   * @param _xrSessionManager an instance of WebXRSessionManager\r\n   * @param options options to use when constructing this feature\r\n   */\n\n\n  function WebXRHitTest(_xrSessionManager,\n  /**\r\n   * options to use when constructing this feature\r\n   */\n  options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, _xrSessionManager) || this;\n\n    _this.options = options;\n    _this._tmpMat = new Matrix();\n    _this._tmpPos = new Vector3();\n    _this._tmpQuat = new Quaternion();\n\n    _this.initHitTestSource = function (referenceSpace) {\n      if (!referenceSpace) {\n        return;\n      }\n\n      var offsetRay = new XRRay(_this.options.offsetRay || {});\n      var hitTestOptions = {\n        space: _this.options.useReferenceSpace ? referenceSpace : _this._xrSessionManager.viewerReferenceSpace,\n        offsetRay: offsetRay\n      };\n\n      if (_this.options.entityTypes) {\n        hitTestOptions.entityTypes = _this.options.entityTypes;\n      }\n\n      if (!hitTestOptions.space) {\n        Tools.Warn(\"waiting for viewer reference space to initialize\");\n        return;\n      }\n\n      _this._xrSessionManager.session.requestHitTestSource(hitTestOptions).then(function (hitTestSource) {\n        if (_this._xrHitTestSource) {\n          _this._xrHitTestSource.cancel();\n        }\n\n        _this._xrHitTestSource = hitTestSource;\n      });\n    };\n    /**\r\n     * When set to true, each hit test will have its own position/rotation objects\r\n     * When set to false, position and rotation objects will be reused for each hit test. It is expected that\r\n     * the developers will clone them or copy them as they see fit.\r\n     */\n\n\n    _this.autoCloneTransformation = false;\n    /**\r\n     * Triggered when new babylon (transformed) hit test results are available\r\n     * Note - this will be called when results come back from the device. It can be an empty array!!\r\n     */\n\n    _this.onHitTestResultObservable = new Observable();\n    /**\r\n     * Use this to temporarily pause hit test checks.\r\n     */\n\n    _this.paused = false;\n    _this.xrNativeFeatureName = \"hit-test\";\n    Tools.Warn(\"Hit test is an experimental and unstable feature.\");\n    return _this;\n  }\n  /**\r\n   * attach this feature\r\n   * Will usually be called by the features manager\r\n   *\r\n   * @returns true if successful.\r\n   */\n\n\n  WebXRHitTest.prototype.attach = function () {\n    var _this = this;\n\n    if (!_super.prototype.attach.call(this)) {\n      return false;\n    } // Feature enabled, but not available\n\n\n    if (!this._xrSessionManager.session.requestHitTestSource) {\n      return false;\n    }\n\n    if (!this.options.disablePermanentHitTest) {\n      if (this._xrSessionManager.referenceSpace) {\n        this.initHitTestSource(this._xrSessionManager.referenceSpace);\n      }\n\n      this._xrSessionManager.onXRReferenceSpaceChanged.add(this.initHitTestSource);\n    }\n\n    if (this.options.enableTransientHitTest) {\n      var offsetRay = new XRRay(this.options.transientOffsetRay || {});\n\n      this._xrSessionManager.session.requestHitTestSourceForTransientInput({\n        profile: \"generic-touchscreen\",\n        offsetRay: offsetRay,\n        entityTypes: this.options.entityTypes\n      }).then(function (hitSource) {\n        _this._transientXrHitTestSource = hitSource;\n      });\n    }\n\n    return true;\n  };\n  /**\r\n   * detach this feature.\r\n   * Will usually be called by the features manager\r\n   *\r\n   * @returns true if successful.\r\n   */\n\n\n  WebXRHitTest.prototype.detach = function () {\n    if (!_super.prototype.detach.call(this)) {\n      return false;\n    }\n\n    if (this._xrHitTestSource) {\n      this._xrHitTestSource.cancel();\n\n      this._xrHitTestSource = null;\n    }\n\n    this._xrSessionManager.onXRReferenceSpaceChanged.removeCallback(this.initHitTestSource);\n\n    if (this._transientXrHitTestSource) {\n      this._transientXrHitTestSource.cancel();\n\n      this._transientXrHitTestSource = null;\n    }\n\n    return true;\n  };\n  /**\r\n   * Dispose this feature and all of the resources attached\r\n   */\n\n\n  WebXRHitTest.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.onHitTestResultObservable.clear();\n  };\n\n  WebXRHitTest.prototype._onXRFrame = function (frame) {\n    var _this = this; // make sure we do nothing if (async) not attached\n\n\n    if (!this.attached || this.paused) {\n      return;\n    }\n\n    if (this._xrHitTestSource) {\n      var results = frame.getHitTestResults(this._xrHitTestSource);\n\n      this._processWebXRHitTestResult(results);\n    }\n\n    if (this._transientXrHitTestSource) {\n      var hitTestResultsPerInputSource = frame.getHitTestResultsForTransientInput(this._transientXrHitTestSource);\n      hitTestResultsPerInputSource.forEach(function (resultsPerInputSource) {\n        _this._processWebXRHitTestResult(resultsPerInputSource.results, resultsPerInputSource.inputSource);\n      });\n    }\n  };\n\n  WebXRHitTest.prototype._processWebXRHitTestResult = function (hitTestResults, inputSource) {\n    var _this = this;\n\n    var results = [];\n    hitTestResults.forEach(function (hitTestResult) {\n      var pose = hitTestResult.getPose(_this._xrSessionManager.referenceSpace);\n\n      if (!pose) {\n        return;\n      }\n\n      var pos = pose.transform.position;\n      var quat = pose.transform.orientation;\n\n      _this._tmpPos.set(pos.x, pos.y, pos.z);\n\n      _this._tmpQuat.set(quat.x, quat.y, quat.z, quat.w);\n\n      Matrix.FromFloat32ArrayToRefScaled(pose.transform.matrix, 0, 1, _this._tmpMat);\n\n      if (!_this._xrSessionManager.scene.useRightHandedSystem) {\n        _this._tmpPos.z *= -1;\n        _this._tmpQuat.z *= -1;\n        _this._tmpQuat.w *= -1;\n\n        _this._tmpMat.toggleModelMatrixHandInPlace();\n      }\n\n      var result = {\n        position: _this.autoCloneTransformation ? _this._tmpPos.clone() : _this._tmpPos,\n        rotationQuaternion: _this.autoCloneTransformation ? _this._tmpQuat.clone() : _this._tmpQuat,\n        transformationMatrix: _this.autoCloneTransformation ? _this._tmpMat.clone() : _this._tmpMat,\n        inputSource: inputSource,\n        isTransient: !!inputSource,\n        xrHitResult: hitTestResult\n      };\n      results.push(result);\n    });\n    this.onHitTestResultObservable.notifyObservers(results);\n  };\n  /**\r\n   * The module's name\r\n   */\n\n\n  WebXRHitTest.Name = WebXRFeatureName.HIT_TEST;\n  /**\r\n   * The (Babylon) version of this module.\r\n   * This is an integer representing the implementation version.\r\n   * This number does not correspond to the WebXR specs version\r\n   */\n\n  WebXRHitTest.Version = 2;\n  return WebXRHitTest;\n}(WebXRAbstractFeature);\n\nexport { WebXRHitTest }; //register the plugin versions\n\nWebXRFeaturesManager.AddWebXRFeature(WebXRHitTest.Name, function (xrSessionManager, options) {\n  return function () {\n    return new WebXRHitTest(xrSessionManager, options);\n  };\n}, WebXRHitTest.Version, false);","map":{"version":3,"sources":["C:/Users/rober/Documents/Computer Science/Side Projects/arcade/node_modules/@babylonjs/core/XR/features/WebXRHitTest.js"],"names":["__extends","WebXRFeaturesManager","WebXRFeatureName","Observable","Vector3","Matrix","Quaternion","WebXRAbstractFeature","Tools","WebXRHitTest","_super","_xrSessionManager","options","_this","call","_tmpMat","_tmpPos","_tmpQuat","initHitTestSource","referenceSpace","offsetRay","XRRay","hitTestOptions","space","useReferenceSpace","viewerReferenceSpace","entityTypes","Warn","session","requestHitTestSource","then","hitTestSource","_xrHitTestSource","cancel","autoCloneTransformation","onHitTestResultObservable","paused","xrNativeFeatureName","prototype","attach","disablePermanentHitTest","onXRReferenceSpaceChanged","add","enableTransientHitTest","transientOffsetRay","requestHitTestSourceForTransientInput","profile","hitSource","_transientXrHitTestSource","detach","removeCallback","dispose","clear","_onXRFrame","frame","attached","results","getHitTestResults","_processWebXRHitTestResult","hitTestResultsPerInputSource","getHitTestResultsForTransientInput","forEach","resultsPerInputSource","inputSource","hitTestResults","hitTestResult","pose","getPose","pos","transform","position","quat","orientation","set","x","y","z","w","FromFloat32ArrayToRefScaled","matrix","scene","useRightHandedSystem","toggleModelMatrixHandInPlace","result","clone","rotationQuaternion","transformationMatrix","isTransient","xrHitResult","push","notifyObservers","Name","HIT_TEST","Version","AddWebXRFeature","xrSessionManager"],"mappings":"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","sourcesContent":["import { __extends } from \"tslib\";\r\nimport { WebXRFeaturesManager, WebXRFeatureName } from \"../webXRFeaturesManager\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { Vector3, Matrix, Quaternion } from \"../../Maths/math.vector\";\r\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature\";\r\nimport { Tools } from \"../../Misc/tools\";\r\n/**\r\n * The currently-working hit-test module.\r\n * Hit test (or Ray-casting) is used to interact with the real world.\r\n * For further information read here - https://github.com/immersive-web/hit-test\r\n *\r\n * Tested on chrome (mobile) 80.\r\n */\r\nvar WebXRHitTest = /** @class */ (function (_super) {\r\n    __extends(WebXRHitTest, _super);\r\n    /**\r\n     * Creates a new instance of the hit test feature\r\n     * @param _xrSessionManager an instance of WebXRSessionManager\r\n     * @param options options to use when constructing this feature\r\n     */\r\n    function WebXRHitTest(_xrSessionManager, \r\n    /**\r\n     * options to use when constructing this feature\r\n     */\r\n    options) {\r\n        if (options === void 0) { options = {}; }\r\n        var _this = _super.call(this, _xrSessionManager) || this;\r\n        _this.options = options;\r\n        _this._tmpMat = new Matrix();\r\n        _this._tmpPos = new Vector3();\r\n        _this._tmpQuat = new Quaternion();\r\n        _this.initHitTestSource = function (referenceSpace) {\r\n            if (!referenceSpace) {\r\n                return;\r\n            }\r\n            var offsetRay = new XRRay(_this.options.offsetRay || {});\r\n            var hitTestOptions = {\r\n                space: _this.options.useReferenceSpace ? referenceSpace : _this._xrSessionManager.viewerReferenceSpace,\r\n                offsetRay: offsetRay,\r\n            };\r\n            if (_this.options.entityTypes) {\r\n                hitTestOptions.entityTypes = _this.options.entityTypes;\r\n            }\r\n            if (!hitTestOptions.space) {\r\n                Tools.Warn(\"waiting for viewer reference space to initialize\");\r\n                return;\r\n            }\r\n            _this._xrSessionManager.session.requestHitTestSource(hitTestOptions).then(function (hitTestSource) {\r\n                if (_this._xrHitTestSource) {\r\n                    _this._xrHitTestSource.cancel();\r\n                }\r\n                _this._xrHitTestSource = hitTestSource;\r\n            });\r\n        };\r\n        /**\r\n         * When set to true, each hit test will have its own position/rotation objects\r\n         * When set to false, position and rotation objects will be reused for each hit test. It is expected that\r\n         * the developers will clone them or copy them as they see fit.\r\n         */\r\n        _this.autoCloneTransformation = false;\r\n        /**\r\n         * Triggered when new babylon (transformed) hit test results are available\r\n         * Note - this will be called when results come back from the device. It can be an empty array!!\r\n         */\r\n        _this.onHitTestResultObservable = new Observable();\r\n        /**\r\n         * Use this to temporarily pause hit test checks.\r\n         */\r\n        _this.paused = false;\r\n        _this.xrNativeFeatureName = \"hit-test\";\r\n        Tools.Warn(\"Hit test is an experimental and unstable feature.\");\r\n        return _this;\r\n    }\r\n    /**\r\n     * attach this feature\r\n     * Will usually be called by the features manager\r\n     *\r\n     * @returns true if successful.\r\n     */\r\n    WebXRHitTest.prototype.attach = function () {\r\n        var _this = this;\r\n        if (!_super.prototype.attach.call(this)) {\r\n            return false;\r\n        }\r\n        // Feature enabled, but not available\r\n        if (!this._xrSessionManager.session.requestHitTestSource) {\r\n            return false;\r\n        }\r\n        if (!this.options.disablePermanentHitTest) {\r\n            if (this._xrSessionManager.referenceSpace) {\r\n                this.initHitTestSource(this._xrSessionManager.referenceSpace);\r\n            }\r\n            this._xrSessionManager.onXRReferenceSpaceChanged.add(this.initHitTestSource);\r\n        }\r\n        if (this.options.enableTransientHitTest) {\r\n            var offsetRay = new XRRay(this.options.transientOffsetRay || {});\r\n            this._xrSessionManager.session\r\n                .requestHitTestSourceForTransientInput({\r\n                profile: \"generic-touchscreen\",\r\n                offsetRay: offsetRay,\r\n                entityTypes: this.options.entityTypes,\r\n            })\r\n                .then(function (hitSource) {\r\n                _this._transientXrHitTestSource = hitSource;\r\n            });\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * detach this feature.\r\n     * Will usually be called by the features manager\r\n     *\r\n     * @returns true if successful.\r\n     */\r\n    WebXRHitTest.prototype.detach = function () {\r\n        if (!_super.prototype.detach.call(this)) {\r\n            return false;\r\n        }\r\n        if (this._xrHitTestSource) {\r\n            this._xrHitTestSource.cancel();\r\n            this._xrHitTestSource = null;\r\n        }\r\n        this._xrSessionManager.onXRReferenceSpaceChanged.removeCallback(this.initHitTestSource);\r\n        if (this._transientXrHitTestSource) {\r\n            this._transientXrHitTestSource.cancel();\r\n            this._transientXrHitTestSource = null;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Dispose this feature and all of the resources attached\r\n     */\r\n    WebXRHitTest.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n        this.onHitTestResultObservable.clear();\r\n    };\r\n    WebXRHitTest.prototype._onXRFrame = function (frame) {\r\n        var _this = this;\r\n        // make sure we do nothing if (async) not attached\r\n        if (!this.attached || this.paused) {\r\n            return;\r\n        }\r\n        if (this._xrHitTestSource) {\r\n            var results = frame.getHitTestResults(this._xrHitTestSource);\r\n            this._processWebXRHitTestResult(results);\r\n        }\r\n        if (this._transientXrHitTestSource) {\r\n            var hitTestResultsPerInputSource = frame.getHitTestResultsForTransientInput(this._transientXrHitTestSource);\r\n            hitTestResultsPerInputSource.forEach(function (resultsPerInputSource) {\r\n                _this._processWebXRHitTestResult(resultsPerInputSource.results, resultsPerInputSource.inputSource);\r\n            });\r\n        }\r\n    };\r\n    WebXRHitTest.prototype._processWebXRHitTestResult = function (hitTestResults, inputSource) {\r\n        var _this = this;\r\n        var results = [];\r\n        hitTestResults.forEach(function (hitTestResult) {\r\n            var pose = hitTestResult.getPose(_this._xrSessionManager.referenceSpace);\r\n            if (!pose) {\r\n                return;\r\n            }\r\n            var pos = pose.transform.position;\r\n            var quat = pose.transform.orientation;\r\n            _this._tmpPos.set(pos.x, pos.y, pos.z);\r\n            _this._tmpQuat.set(quat.x, quat.y, quat.z, quat.w);\r\n            Matrix.FromFloat32ArrayToRefScaled(pose.transform.matrix, 0, 1, _this._tmpMat);\r\n            if (!_this._xrSessionManager.scene.useRightHandedSystem) {\r\n                _this._tmpPos.z *= -1;\r\n                _this._tmpQuat.z *= -1;\r\n                _this._tmpQuat.w *= -1;\r\n                _this._tmpMat.toggleModelMatrixHandInPlace();\r\n            }\r\n            var result = {\r\n                position: _this.autoCloneTransformation ? _this._tmpPos.clone() : _this._tmpPos,\r\n                rotationQuaternion: _this.autoCloneTransformation ? _this._tmpQuat.clone() : _this._tmpQuat,\r\n                transformationMatrix: _this.autoCloneTransformation ? _this._tmpMat.clone() : _this._tmpMat,\r\n                inputSource: inputSource,\r\n                isTransient: !!inputSource,\r\n                xrHitResult: hitTestResult,\r\n            };\r\n            results.push(result);\r\n        });\r\n        this.onHitTestResultObservable.notifyObservers(results);\r\n    };\r\n    /**\r\n     * The module's name\r\n     */\r\n    WebXRHitTest.Name = WebXRFeatureName.HIT_TEST;\r\n    /**\r\n     * The (Babylon) version of this module.\r\n     * This is an integer representing the implementation version.\r\n     * This number does not correspond to the WebXR specs version\r\n     */\r\n    WebXRHitTest.Version = 2;\r\n    return WebXRHitTest;\r\n}(WebXRAbstractFeature));\r\nexport { WebXRHitTest };\r\n//register the plugin versions\r\nWebXRFeaturesManager.AddWebXRFeature(WebXRHitTest.Name, function (xrSessionManager, options) {\r\n    return function () { return new WebXRHitTest(xrSessionManager, options); };\r\n}, WebXRHitTest.Version, false);\r\n"]},"metadata":{},"sourceType":"module"}